on: [push]

name: CI

jobs:
  rust:
    env:
      SQLX_OFFLINE: true
      RUSTFLAGS: "-Cinstrument-coverage"
      LLVM_PROFILE_FILE: "platune-%p-%m.profraw"
    name: Run Rust tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: apt-get update
        # act doesn't have sudo installed but it's required on the real actions runner
        run: $(command -v sudo>/dev/null && echo "sudo") apt-get update
      - name: Install deps
        run: $(command -v sudo>/dev/null && echo "sudo") apt-get install -y libssl-dev libasound2-dev cmake build-essential pkg-config git zlib1g-dev
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true
          profile: minimal
          components: rustfmt, clippy
      - name: Install binaries
        run: |
          # Install precompiled binaries to improve build time
          wget https://github.com/ryankurte/cargo-binstall/releases/latest/download/cargo-binstall-x86_64-unknown-linux-gnu.tgz -O cargo-binstall.tgz
          tar -xzvf cargo-binstall.tgz
          ./cargo-binstall grcov --no-confirm
      - uses: Swatinem/rust-cache@v1
        with:
          sharedKey: cache-${{ hashFiles('**/Cargo.lock') }}
      - name: Clippy
        run: cargo clippy -- -D warnings
      - name: Test
        run: |
          rustup component add llvm-tools-preview 
          cargo test --locked
          grcov . -s . --binary-path ./target/debug/ -t lcov --branch --ignore-not-existing --ignore "target/**/*" --ignore "**/*/*_test.rs" -o ./target/debug/lcov.info
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          verbose: true
          fail_ci_if_error: true
          files: ./target/debug/lcov.info
  go:
    name: Run Go tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: "^1.18"
      - name: Test
        run: cd platune-cli && go build && TERM=xterm-256color script -q -e -c "go test ./... -v"
