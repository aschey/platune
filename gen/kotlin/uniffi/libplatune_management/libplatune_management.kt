// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package uniffi.libplatune_management

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the detils of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Callback
import com.sun.jna.IntegerType
import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.ptr.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.coroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicLong
import kotlin.coroutines.Continuation
import kotlin.coroutines.resume
import kotlin.coroutines.resumeWithException
import kotlin.coroutines.suspendCoroutine

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    @JvmField var capacity: Int = 0

    @JvmField var len: Int = 0

    @JvmField var data: Pointer? = null

    class ByValue : RustBuffer(), Structure.ByValue
    class ByReference : RustBuffer(), Structure.ByReference

    companion object {
        internal fun alloc(size: Int = 0) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_libplatune_management_rustbuffer_alloc(size, status).also {
                if (it.data == null) {
                    throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=$size)")
                }
            }
        }

        internal fun free(buf: RustBuffer.ByValue) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_libplatune_management_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setInt(0, value.capacity)
        pointer.setInt(4, value.len)
        pointer.setPointer(8, value.data)
    }

    /**
     * Get a `RustBuffer.ByValue` from this reference.
     */
    fun getValue(): RustBuffer.ByValue {
        val pointer = getPointer()
        val value = RustBuffer.ByValue()
        value.writeField("capacity", pointer.getInt(0))
        value.writeField("len", pointer.getInt(4))
        value.writeField("data", pointer.getPointer(8))

        return value
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0

    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}

// The FfiConverter interface handles converter types to and from the FFI
//
// All implementing objects should be public to support external types.  When a
// type is external we need to import it's FfiConverter.
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): Int

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity.toLong()).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
            val item = read(byteBuf)
            if (byteBuf.hasRemaining()) {
                throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
            }
            return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

// FfiConverter that uses `RustBuffer` as the FfiType
public interface FfiConverterRustBuffer<KotlinType> : FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}

// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.
// Error runtime.
@Structure.FieldOrder("code", "error_buf")
internal open class RustCallStatus : Structure() {
    @JvmField var code: Byte = 0

    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    class ByValue : RustCallStatus(), Structure.ByValue

    fun isSuccess(): Boolean {
        return code == 0.toByte()
    }

    fun isError(): Boolean {
        return code == 1.toByte()
    }

    fun isPanic(): Boolean {
        return code == 2.toByte()
    }
}

class InternalException(message: String) : Exception(message)

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface CallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E : Exception> rustCallWithError(errorHandler: CallStatusErrorHandler<E>, callback: (RustCallStatus) -> U): U {
    var status = RustCallStatus()
    val return_value = callback(status)
    checkCallStatus(errorHandler, status)
    return return_value
}

// Check RustCallStatus and throw an error if the call wasn't successful
private fun<E : Exception> checkCallStatus(errorHandler: CallStatusErrorHandler<E>, status: RustCallStatus) {
    if (status.isSuccess()) {
        return
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

// CallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
object NullCallStatusErrorHandler : CallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> rustCall(callback: (RustCallStatus) -> U): U {
    return rustCallWithError(NullCallStatusErrorHandler, callback)
}

// IntegerType that matches Rust's `usize` / C's `size_t`
public class USize(value: Long = 0) : IntegerType(Native.SIZE_T_SIZE, value, true) {
    // This is needed to fill in the gaps of IntegerType's implementation of Number for Kotlin.
    override fun toByte() = toInt().toByte()
    override fun toChar() = toInt().toChar()
    override fun toShort() = toInt().toShort()

    fun writeToBuffer(buf: ByteBuffer) {
        // Make sure we always write usize integers using native byte-order, since they may be
        // casted to pointer values
        buf.order(ByteOrder.nativeOrder())
        try {
            when (Native.SIZE_T_SIZE) {
                4 -> buf.putInt(toInt())
                8 -> buf.putLong(toLong())
                else -> throw RuntimeException("Invalid SIZE_T_SIZE: ${Native.SIZE_T_SIZE}")
            }
        } finally {
            buf.order(ByteOrder.BIG_ENDIAN)
        }
    }

    companion object {
        val size: Int
            get() = Native.SIZE_T_SIZE

        fun readFromBuffer(buf: ByteBuffer): USize {
            // Make sure we always read usize integers using native byte-order, since they may be
            // casted from pointer values
            buf.order(ByteOrder.nativeOrder())
            try {
                return when (Native.SIZE_T_SIZE) {
                    4 -> USize(buf.getInt().toLong())
                    8 -> USize(buf.getLong())
                    else -> throw RuntimeException("Invalid SIZE_T_SIZE: ${Native.SIZE_T_SIZE}")
                }
            } finally {
                buf.order(ByteOrder.BIG_ENDIAN)
            }
        }
    }
}

// Map handles to objects
//
// This is used when the Rust code expects an opaque pointer to represent some foreign object.
// Normally we would pass a pointer to the object, but JNA doesn't support getting a pointer from an
// object reference , nor does it support leaking a reference to Rust.
//
// Instead, this class maps USize values to objects so that we can pass a pointer-sized type to
// Rust when it needs an opaque pointer.
//
// TODO: refactor callbacks to use this class
internal class UniFfiHandleMap<T : Any> {
    private val map = ConcurrentHashMap<USize, T>()

    // Use AtomicInteger for our counter, since we may be on a 32-bit system.  4 billion possible
    // values seems like enough. If somehow we generate 4 billion handles, then this will wrap
    // around back to zero and we can assume the first handle generated will have been dropped by
    // then.
    private val counter = java.util.concurrent.atomic.AtomicInteger(0)

    val size: Int
        get() = map.size

    fun insert(obj: T): USize {
        val handle = USize(counter.getAndAdd(1).toLong())
        map.put(handle, obj)
        return handle
    }

    fun get(handle: USize): T? {
        return map.get(handle)
    }

    fun remove(handle: USize) {
        map.remove(handle)
    }
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "libplatune_management"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String,
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface _UniFFILib : Library {
    companion object {
        internal val INSTANCE: _UniFFILib by lazy {
            loadIndirect<_UniFFILib>(componentName = "libplatune_management")
                .also { lib: _UniFFILib ->
                    uniffiCheckContractApiVersion(lib)
                    uniffiCheckApiChecksums(lib)
                    FfiConverterForeignExecutor.register(lib)
                }
        }
    }

    fun uniffi_libplatune_management_fn_free_ffidatabase(
        `ptr`: Pointer,
        _uniffi_out_err: RustCallStatus,
    ): Unit
    fun uniffi_libplatune_management_fn_constructor_ffidatabase_new(
        `path`: RustBuffer.ByValue,
        `createIfMissing`: Byte,
        _uniffi_out_err: RustCallStatus,
    ): Pointer
    fun uniffi_libplatune_management_fn_method_ffidatabase_sync_database(
        `ptr`: Pointer,
        `uniffiExecutor`: USize,
        `uniffiCallback`: UniFfiFutureCallbackByte,
        `uniffiCallbackData`: USize,
        _uniffi_out_err: RustCallStatus,
    ): Unit
    fun uniffi_libplatune_management_fn_free_ffimanager(
        `ptr`: Pointer,
        _uniffi_out_err: RustCallStatus,
    ): Unit
    fun uniffi_libplatune_management_fn_constructor_ffimanager_new(
        `database`: Pointer,
        _uniffi_out_err: RustCallStatus,
    ): Pointer
    fun uniffi_libplatune_management_fn_method_ffimanager_get_song_by_path(
        `ptr`: Pointer,
        `path`: RustBuffer.ByValue,
        `uniffiExecutor`: USize,
        `uniffiCallback`: UniFfiFutureCallbackRustBuffer,
        `uniffiCallbackData`: USize,
        _uniffi_out_err: RustCallStatus,
    ): Unit
    fun uniffi_libplatune_management_fn_method_ffimanager_lookup(
        `ptr`: Pointer,
        `correlationIds`: RustBuffer.ByValue,
        `entryType`: RustBuffer.ByValue,
        `uniffiExecutor`: USize,
        `uniffiCallback`: UniFfiFutureCallbackRustBuffer,
        `uniffiCallbackData`: USize,
        _uniffi_out_err: RustCallStatus,
    ): Unit
    fun uniffi_libplatune_management_fn_method_ffimanager_search(
        `ptr`: Pointer,
        `query`: RustBuffer.ByValue,
        `options`: RustBuffer.ByValue,
        `uniffiExecutor`: USize,
        `uniffiCallback`: UniFfiFutureCallbackRustBuffer,
        `uniffiCallbackData`: USize,
        _uniffi_out_err: RustCallStatus,
    ): Unit
    fun ffi_libplatune_management_rustbuffer_alloc(
        `size`: Int,
        _uniffi_out_err: RustCallStatus,
    ): RustBuffer.ByValue
    fun ffi_libplatune_management_rustbuffer_from_bytes(
        `bytes`: ForeignBytes.ByValue,
        _uniffi_out_err: RustCallStatus,
    ): RustBuffer.ByValue
    fun ffi_libplatune_management_rustbuffer_free(
        `buf`: RustBuffer.ByValue,
        _uniffi_out_err: RustCallStatus,
    ): Unit
    fun ffi_libplatune_management_rustbuffer_reserve(
        `buf`: RustBuffer.ByValue,
        `additional`: Int,
        _uniffi_out_err: RustCallStatus,
    ): RustBuffer.ByValue
    fun uniffi_libplatune_management_checksum_method_ffidatabase_sync_database(): Short
    fun uniffi_libplatune_management_checksum_method_ffimanager_get_song_by_path(): Short
    fun uniffi_libplatune_management_checksum_method_ffimanager_lookup(): Short
    fun uniffi_libplatune_management_checksum_method_ffimanager_search(): Short
    fun uniffi_libplatune_management_checksum_constructor_ffidatabase_new(): Short
    fun uniffi_libplatune_management_checksum_constructor_ffimanager_new(): Short
    fun uniffi_foreign_executor_callback_set(
        `callback`: UniFfiForeignExecutorCallback,
    ): Unit
    fun ffi_libplatune_management_uniffi_contract_version(): Int
}

private fun uniffiCheckContractApiVersion(lib: _UniFFILib) {
    // Get the bindings contract version from our ComponentInterface
    val bindings_contract_version = 22
    // Get the scaffolding contract version by calling the into the dylib
    val scaffolding_contract_version = lib.ffi_libplatune_management_uniffi_contract_version()
    if (bindings_contract_version != scaffolding_contract_version) {
        throw RuntimeException("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    }
}

@Suppress("UNUSED_PARAMETER")
private fun uniffiCheckApiChecksums(lib: _UniFFILib) {
    if (lib.uniffi_libplatune_management_checksum_method_ffidatabase_sync_database() != 8829.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_libplatune_management_checksum_method_ffimanager_get_song_by_path() != 24157.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_libplatune_management_checksum_method_ffimanager_lookup() != 50974.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_libplatune_management_checksum_method_ffimanager_search() != 6021.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_libplatune_management_checksum_constructor_ffidatabase_new() != 15248.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_libplatune_management_checksum_constructor_ffimanager_new() != 62020.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// Public interface members begin here.

public object FfiConverterInt : FfiConverter<Int, Int> {
    override fun lift(value: Int): Int {
        return value
    }

    override fun read(buf: ByteBuffer): Int {
        return buf.getInt()
    }

    override fun lower(value: Int): Int {
        return value
    }

    override fun allocationSize(value: Int) = 4

    override fun write(value: Int, buf: ByteBuffer) {
        buf.putInt(value)
    }
}

public object FfiConverterLong : FfiConverter<Long, Long> {
    override fun lift(value: Long): Long {
        return value
    }

    override fun read(buf: ByteBuffer): Long {
        return buf.getLong()
    }

    override fun lower(value: Long): Long {
        return value
    }

    override fun allocationSize(value: Long) = 8

    override fun write(value: Long, buf: ByteBuffer) {
        buf.putLong(value)
    }
}

public object FfiConverterBoolean : FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean {
        return value.toInt() != 0
    }

    override fun read(buf: ByteBuffer): Boolean {
        return lift(buf.get())
    }

    override fun lower(value: Boolean): Byte {
        return if (value) 1.toByte() else 0.toByte()
    }

    override fun allocationSize(value: Boolean) = 1

    override fun write(value: Boolean, buf: ByteBuffer) {
        buf.put(lower(value))
    }
}

public object FfiConverterString : FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len)
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteArr = value.toByteArray(Charsets.UTF_8)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteArr.size)
        rbuf.asByteBuffer()!!.put(byteArr)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per unicode codepoint which will always be
    // enough.
    override fun allocationSize(value: String): Int {
        val sizeForLength = 4
        val sizeForString = value.length * 3
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteArr = value.toByteArray(Charsets.UTF_8)
        buf.putInt(byteArr.size)
        buf.put(byteArr)
    }
}

// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()
    companion object {
        fun destroy(vararg args: Any?) {
            args.filterIsInstance<Disposable>()
                .forEach(Disposable::destroy)
        }
    }
}

inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

// The base class for all UniFFI Object types.
//
// This class provides core operations for working with the Rust `Arc<T>` pointer to
// the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// the Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each `FFIObject` instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an `FFIObject` is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an `FFIObject` instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so will
//     leak the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each `FFIObject` an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// In the future we may be able to replace some of this with automatic finalization logic, such as using
// the new "Cleaner" functionaility in Java 9. The above scheme has been designed to work even if `destroy` is
// invoked by garbage-collection machinery rather than by calling code (which by the way, it's apparently also
// possible for the JVM to finalize an object while there is an in-flight call to one of its methods [1],
// so there would still be some complexity here).
//
// Sigh...all of this for want of a robust finalization mechanism.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//
abstract class FFIObject(
    protected val pointer: Pointer,
) : Disposable, AutoCloseable {

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    protected open fun freeRustArcPtr() {
        // To be overridden in subclasses.
    }

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                this.freeRustArcPtr()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (!this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.pointer)
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                this.freeRustArcPtr()
            }
        }
    }
}

public interface FfiDatabaseInterface {
    @Throws(DbException::class)
    suspend fun `syncDatabase`()
}

class FfiDatabase(
    pointer: Pointer,
) : FFIObject(pointer), FfiDatabaseInterface {
    constructor(`path`: String, `createIfMissing`: Boolean) :
        this(
            rustCallWithError(DbException) { _status ->
                _UniFFILib.INSTANCE.uniffi_libplatune_management_fn_constructor_ffidatabase_new(FfiConverterString.lower(`path`), FfiConverterBoolean.lower(`createIfMissing`), _status)
            },
        )

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    protected override fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_libplatune_management_fn_free_ffidatabase(this.pointer, status)
        }
    }

    @Throws(DbException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `syncDatabase`() {
        // Create a new `CoroutineScope` for this operation, suspend the coroutine, and call the
        // scaffolding function, passing it one of the callback handlers from `AsyncTypes.kt`.
        //
        // Make sure to retain a reference to the callback handler to ensure that it's not GCed before
        // it's invoked
        var callbackHolder: UniFfiFutureCallbackHandlerVoid_TypeDbError? = null
        return coroutineScope {
            val scope = this
            return@coroutineScope suspendCoroutine { continuation ->
                try {
                    val callback = UniFfiFutureCallbackHandlerVoid_TypeDbError(continuation)
                    callbackHolder = callback
                    callWithPointer { thisPtr ->
                        rustCall { status ->
                            _UniFFILib.INSTANCE.uniffi_libplatune_management_fn_method_ffidatabase_sync_database(
                                thisPtr,

                                FfiConverterForeignExecutor.lower(scope),
                                callback,
                                USize(0),
                                status,
                            )
                        }
                    }
                } catch (e: Exception) {
                    continuation.resumeWithException(e)
                }
            }
        }
    }
}

public object FfiConverterTypeFfiDatabase : FfiConverter<FfiDatabase, Pointer> {
    override fun lower(value: FfiDatabase): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): FfiDatabase {
        return FfiDatabase(value)
    }

    override fun read(buf: ByteBuffer): FfiDatabase {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: FfiDatabase) = 8

    override fun write(value: FfiDatabase, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}

public interface FfiManagerInterface {
    @Throws(DbException::class)
    suspend fun `getSongByPath`(`path`: String):

        LookupEntry
            ?@Throws(DbException::class)
    suspend fun `lookup`(`correlationIds`: List<Long>, `entryType`: EntryType):

        List<
            LookupEntry,
            >@Throws(DbException::class)
    suspend fun `search`(`query`: String, `options`: FfiSearchOptions): List<SearchResult>
}

class FfiManager(
    pointer: Pointer,
) : FFIObject(pointer), FfiManagerInterface {
    constructor(`database`: FfiDatabase) :
        this(
            rustCall() { _status ->
                _UniFFILib.INSTANCE.uniffi_libplatune_management_fn_constructor_ffimanager_new(FfiConverterTypeFfiDatabase.lower(`database`), _status)
            },
        )

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    protected override fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_libplatune_management_fn_free_ffimanager(this.pointer, status)
        }
    }

    @Throws(DbException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `getSongByPath`(`path`: String): LookupEntry? {
        // Create a new `CoroutineScope` for this operation, suspend the coroutine, and call the
        // scaffolding function, passing it one of the callback handlers from `AsyncTypes.kt`.
        //
        // Make sure to retain a reference to the callback handler to ensure that it's not GCed before
        // it's invoked
        var callbackHolder: UniFfiFutureCallbackHandlerOptionalTypeLookupEntry_TypeDbError? = null
        return coroutineScope {
            val scope = this
            return@coroutineScope suspendCoroutine { continuation ->
                try {
                    val callback = UniFfiFutureCallbackHandlerOptionalTypeLookupEntry_TypeDbError(continuation)
                    callbackHolder = callback
                    callWithPointer { thisPtr ->
                        rustCall { status ->
                            _UniFFILib.INSTANCE.uniffi_libplatune_management_fn_method_ffimanager_get_song_by_path(
                                thisPtr,
                                FfiConverterString.lower(`path`),
                                FfiConverterForeignExecutor.lower(scope),
                                callback,
                                USize(0),
                                status,
                            )
                        }
                    }
                } catch (e: Exception) {
                    continuation.resumeWithException(e)
                }
            }
        }
    }

    @Throws(DbException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `lookup`(`correlationIds`: List<Long>, `entryType`: EntryType): List<LookupEntry> {
        // Create a new `CoroutineScope` for this operation, suspend the coroutine, and call the
        // scaffolding function, passing it one of the callback handlers from `AsyncTypes.kt`.
        //
        // Make sure to retain a reference to the callback handler to ensure that it's not GCed before
        // it's invoked
        var callbackHolder: UniFfiFutureCallbackHandlerSequenceTypeLookupEntry_TypeDbError? = null
        return coroutineScope {
            val scope = this
            return@coroutineScope suspendCoroutine { continuation ->
                try {
                    val callback = UniFfiFutureCallbackHandlerSequenceTypeLookupEntry_TypeDbError(continuation)
                    callbackHolder = callback
                    callWithPointer { thisPtr ->
                        rustCall { status ->
                            _UniFFILib.INSTANCE.uniffi_libplatune_management_fn_method_ffimanager_lookup(
                                thisPtr,
                                FfiConverterSequenceLong.lower(`correlationIds`),
                                FfiConverterTypeEntryType.lower(`entryType`),
                                FfiConverterForeignExecutor.lower(scope),
                                callback,
                                USize(0),
                                status,
                            )
                        }
                    }
                } catch (e: Exception) {
                    continuation.resumeWithException(e)
                }
            }
        }
    }

    @Throws(DbException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `search`(`query`: String, `options`: FfiSearchOptions): List<SearchResult> {
        // Create a new `CoroutineScope` for this operation, suspend the coroutine, and call the
        // scaffolding function, passing it one of the callback handlers from `AsyncTypes.kt`.
        //
        // Make sure to retain a reference to the callback handler to ensure that it's not GCed before
        // it's invoked
        var callbackHolder: UniFfiFutureCallbackHandlerSequenceTypeSearchResult_TypeDbError? = null
        return coroutineScope {
            val scope = this
            return@coroutineScope suspendCoroutine { continuation ->
                try {
                    val callback = UniFfiFutureCallbackHandlerSequenceTypeSearchResult_TypeDbError(continuation)
                    callbackHolder = callback
                    callWithPointer { thisPtr ->
                        rustCall { status ->
                            _UniFFILib.INSTANCE.uniffi_libplatune_management_fn_method_ffimanager_search(
                                thisPtr,
                                FfiConverterString.lower(`query`),
                                FfiConverterTypeFfiSearchOptions.lower(`options`),
                                FfiConverterForeignExecutor.lower(scope),
                                callback,
                                USize(0),
                                status,
                            )
                        }
                    }
                } catch (e: Exception) {
                    continuation.resumeWithException(e)
                }
            }
        }
    }
}

public object FfiConverterTypeFfiManager : FfiConverter<FfiManager, Pointer> {
    override fun lower(value: FfiManager): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): FfiManager {
        return FfiManager(value)
    }

    override fun read(buf: ByteBuffer): FfiManager {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: FfiManager) = 8

    override fun write(value: FfiManager, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}

// Callback function to execute a Rust task.  The Kotlin code schedules these in a coroutine then
// invokes them.
internal interface UniFfiRustTaskCallback : com.sun.jna.Callback {
    fun invoke(rustTaskData: Pointer?)
}

object UniFfiForeignExecutorCallback : com.sun.jna.Callback {
    internal fun invoke(handle: USize, delayMs: Int, rustTask: UniFfiRustTaskCallback?, rustTaskData: Pointer?) {
        if (rustTask == null) {
            FfiConverterForeignExecutor.drop(handle)
        } else {
            val coroutineScope = FfiConverterForeignExecutor.lift(handle)
            coroutineScope.launch {
                if (delayMs > 0) {
                    delay(delayMs.toLong())
                }
                rustTask.invoke(rustTaskData)
            }
        }
    }
}

public object FfiConverterForeignExecutor : FfiConverter<CoroutineScope, USize> {
    internal val handleMap = UniFfiHandleMap<CoroutineScope>()

    internal fun drop(handle: USize) {
        handleMap.remove(handle)
    }

    internal fun register(lib: _UniFFILib) {
        lib.uniffi_foreign_executor_callback_set(UniFfiForeignExecutorCallback)
    }

    // Number of live handles, exposed so we can test the memory management
    public fun handleCount(): Int {
        return handleMap.size
    }

    override fun allocationSize(value: CoroutineScope) = USize.size

    override fun lift(value: USize): CoroutineScope {
        return handleMap.get(value) ?: throw RuntimeException("unknown handle in FfiConverterForeignExecutor.lift")
    }

    override fun read(buf: ByteBuffer): CoroutineScope {
        return lift(USize.readFromBuffer(buf))
    }

    override fun lower(value: CoroutineScope): USize {
        return handleMap.insert(value)
    }

    override fun write(value: CoroutineScope, buf: ByteBuffer) {
        lower(value).writeToBuffer(buf)
    }
}

data class FfiSearchOptions(
    var `startHighlight`: String,
    var `endHighlight`: String,
    var `limit`: Int,
    var `validEntryTypes`: List<String>,
)

public object FfiConverterTypeFfiSearchOptions : FfiConverterRustBuffer<FfiSearchOptions> {
    override fun read(buf: ByteBuffer): FfiSearchOptions {
        return FfiSearchOptions(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterInt.read(buf),
            FfiConverterSequenceString.read(buf),
        )
    }

    override fun allocationSize(value: FfiSearchOptions) = (
        FfiConverterString.allocationSize(value.`startHighlight`) +
            FfiConverterString.allocationSize(value.`endHighlight`) +
            FfiConverterInt.allocationSize(value.`limit`) +
            FfiConverterSequenceString.allocationSize(value.`validEntryTypes`)
        )

    override fun write(value: FfiSearchOptions, buf: ByteBuffer) {
        FfiConverterString.write(value.`startHighlight`, buf)
        FfiConverterString.write(value.`endHighlight`, buf)
        FfiConverterInt.write(value.`limit`, buf)
        FfiConverterSequenceString.write(value.`validEntryTypes`, buf)
    }
}

data class LookupEntry(
    var `artist`: String,
    var `albumArtist`: String,
    var `album`: String,
    var `song`: String,
    var `path`: String,
    var `track`: Long,
    var `durationMillis`: Long,
)

public object FfiConverterTypeLookupEntry : FfiConverterRustBuffer<LookupEntry> {
    override fun read(buf: ByteBuffer): LookupEntry {
        return LookupEntry(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterLong.read(buf),
        )
    }

    override fun allocationSize(value: LookupEntry) = (
        FfiConverterString.allocationSize(value.`artist`) +
            FfiConverterString.allocationSize(value.`albumArtist`) +
            FfiConverterString.allocationSize(value.`album`) +
            FfiConverterString.allocationSize(value.`song`) +
            FfiConverterString.allocationSize(value.`path`) +
            FfiConverterLong.allocationSize(value.`track`) +
            FfiConverterLong.allocationSize(value.`durationMillis`)
        )

    override fun write(value: LookupEntry, buf: ByteBuffer) {
        FfiConverterString.write(value.`artist`, buf)
        FfiConverterString.write(value.`albumArtist`, buf)
        FfiConverterString.write(value.`album`, buf)
        FfiConverterString.write(value.`song`, buf)
        FfiConverterString.write(value.`path`, buf)
        FfiConverterLong.write(value.`track`, buf)
        FfiConverterLong.write(value.`durationMillis`, buf)
    }
}

data class SearchResult(
    var `entry`: String,
    var `entryType`: EntryType,
    var `description`: String,
    var `artist`: String?,
    var `correlationIds`: List<Long>,
)

public object FfiConverterTypeSearchResult : FfiConverterRustBuffer<SearchResult> {
    override fun read(buf: ByteBuffer): SearchResult {
        return SearchResult(
            FfiConverterString.read(buf),
            FfiConverterTypeEntryType.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterSequenceLong.read(buf),
        )
    }

    override fun allocationSize(value: SearchResult) = (
        FfiConverterString.allocationSize(value.`entry`) +
            FfiConverterTypeEntryType.allocationSize(value.`entryType`) +
            FfiConverterString.allocationSize(value.`description`) +
            FfiConverterOptionalString.allocationSize(value.`artist`) +
            FfiConverterSequenceLong.allocationSize(value.`correlationIds`)
        )

    override fun write(value: SearchResult, buf: ByteBuffer) {
        FfiConverterString.write(value.`entry`, buf)
        FfiConverterTypeEntryType.write(value.`entryType`, buf)
        FfiConverterString.write(value.`description`, buf)
        FfiConverterOptionalString.write(value.`artist`, buf)
        FfiConverterSequenceLong.write(value.`correlationIds`, buf)
    }
}

sealed class DbException(message: String) : Exception(message) {
    // Each variant is a nested class
    // Flat enums carries a string error message, so no special implementation is necessary.
    class DbException(message: String) : DbException(message)
    class MigrateException(message: String) : DbException(message)
    class SpellfixLoadException(message: String) : DbException(message)

    companion object ErrorHandler : CallStatusErrorHandler<DbException> {
        override fun lift(error_buf: RustBuffer.ByValue): DbException = FfiConverterTypeDbError.lift(error_buf)
    }
}

public object FfiConverterTypeDbError : FfiConverterRustBuffer<DbException> {
    override fun read(buf: ByteBuffer): DbException {
        return when (buf.getInt()) {
            1 -> DbException.DbException(FfiConverterString.read(buf))
            2 -> DbException.MigrateException(FfiConverterString.read(buf))
            3 -> DbException.SpellfixLoadException(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: DbException): Int {
        return 4
    }

    override fun write(value: DbException, buf: ByteBuffer) {
        when (value) {
            is DbException.DbException -> {
                buf.putInt(1)
                Unit
            }
            is DbException.MigrateException -> {
                buf.putInt(2)
                Unit
            }
            is DbException.SpellfixLoadException -> {
                buf.putInt(3)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}

enum class EntryType {
    SONG, ARTIST, ALBUM
}

public object FfiConverterTypeEntryType : FfiConverterRustBuffer<EntryType> {
    override fun read(buf: ByteBuffer) = try {
        EntryType.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: EntryType) = 4

    override fun write(value: EntryType, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}

public object FfiConverterOptionalString : FfiConverterRustBuffer<String?> {
    override fun read(buf: ByteBuffer): String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: String?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(value: String?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}

public object FfiConverterOptionalTypeLookupEntry : FfiConverterRustBuffer<LookupEntry?> {
    override fun read(buf: ByteBuffer): LookupEntry? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeLookupEntry.read(buf)
    }

    override fun allocationSize(value: LookupEntry?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeLookupEntry.allocationSize(value)
        }
    }

    override fun write(value: LookupEntry?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeLookupEntry.write(value, buf)
        }
    }
}

public object FfiConverterSequenceLong : FfiConverterRustBuffer<List<Long>> {
    override fun read(buf: ByteBuffer): List<Long> {
        val len = buf.getInt()
        return List<Long>(len) {
            FfiConverterLong.read(buf)
        }
    }

    override fun allocationSize(value: List<Long>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterLong.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Long>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterLong.write(it, buf)
        }
    }
}

public object FfiConverterSequenceString : FfiConverterRustBuffer<List<String>> {
    override fun read(buf: ByteBuffer): List<String> {
        val len = buf.getInt()
        return List<String>(len) {
            FfiConverterString.read(buf)
        }
    }

    override fun allocationSize(value: List<String>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterString.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<String>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterString.write(it, buf)
        }
    }
}

public object FfiConverterSequenceTypeLookupEntry : FfiConverterRustBuffer<List<LookupEntry>> {
    override fun read(buf: ByteBuffer): List<LookupEntry> {
        val len = buf.getInt()
        return List<LookupEntry>(len) {
            FfiConverterTypeLookupEntry.read(buf)
        }
    }

    override fun allocationSize(value: List<LookupEntry>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeLookupEntry.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<LookupEntry>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeLookupEntry.write(it, buf)
        }
    }
}

public object FfiConverterSequenceTypeSearchResult : FfiConverterRustBuffer<List<SearchResult>> {
    override fun read(buf: ByteBuffer): List<SearchResult> {
        val len = buf.getInt()
        return List<SearchResult>(len) {
            FfiConverterTypeSearchResult.read(buf)
        }
    }

    override fun allocationSize(value: List<SearchResult>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeSearchResult.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<SearchResult>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeSearchResult.write(it, buf)
        }
    }
}
// Async return type handlers

// FFI type for callback handlers
internal interface UniFfiFutureCallbackByte : com.sun.jna.Callback {
    // Note: callbackData is always 0.  We could pass Rust a pointer/usize to represent the
    // continuation, but with JNA it's easier to just store it in the callback handler.
    fun invoke(_callbackData: USize, returnValue: Byte?, callStatus: RustCallStatus.ByValue)
}
internal interface UniFfiFutureCallbackPointer : com.sun.jna.Callback {
    // Note: callbackData is always 0.  We could pass Rust a pointer/usize to represent the
    // continuation, but with JNA it's easier to just store it in the callback handler.
    fun invoke(_callbackData: USize, returnValue: Pointer?, callStatus: RustCallStatus.ByValue)
}
internal interface UniFfiFutureCallbackRustBuffer : com.sun.jna.Callback {
    // Note: callbackData is always 0.  We could pass Rust a pointer/usize to represent the
    // continuation, but with JNA it's easier to just store it in the callback handler.
    fun invoke(_callbackData: USize, returnValue: RustBuffer.ByValue?, callStatus: RustCallStatus.ByValue)
}

// Callback handlers for an async call.  These are invoked by Rust when the future is ready.  They
// lift the return value or error and resume the suspended function.

internal class UniFfiFutureCallbackHandlerVoid_TypeDbError(val continuation: Continuation<Unit>) :
    UniFfiFutureCallbackByte {
    override fun invoke(_callbackData: USize, returnValue: Byte?, callStatus: RustCallStatus.ByValue) {
        try {
            checkCallStatus(DbException, callStatus)
            continuation.resume(Unit)
        } catch (e: Throwable) {
            continuation.resumeWithException(e)
        }
    }
}

internal class UniFfiFutureCallbackHandlerTypeFfiDatabase_TypeDbError(val continuation: Continuation<FfiDatabase>) :
    UniFfiFutureCallbackPointer {
    override fun invoke(_callbackData: USize, returnValue: Pointer?, callStatus: RustCallStatus.ByValue) {
        try {
            checkCallStatus(DbException, callStatus)
            continuation.resume(FfiConverterTypeFfiDatabase.lift(returnValue!!))
        } catch (e: Throwable) {
            continuation.resumeWithException(e)
        }
    }
}

internal class UniFfiFutureCallbackHandlerTypeFfiManager(val continuation: Continuation<FfiManager>) :
    UniFfiFutureCallbackPointer {
    override fun invoke(_callbackData: USize, returnValue: Pointer?, callStatus: RustCallStatus.ByValue) {
        try {
            checkCallStatus(NullCallStatusErrorHandler, callStatus)
            continuation.resume(FfiConverterTypeFfiManager.lift(returnValue!!))
        } catch (e: Throwable) {
            continuation.resumeWithException(e)
        }
    }
}

internal class UniFfiFutureCallbackHandlerOptionalTypeLookupEntry_TypeDbError(val continuation: Continuation<LookupEntry?>) :
    UniFfiFutureCallbackRustBuffer {
    override fun invoke(_callbackData: USize, returnValue: RustBuffer.ByValue?, callStatus: RustCallStatus.ByValue) {
        try {
            checkCallStatus(DbException, callStatus)
            continuation.resume(FfiConverterOptionalTypeLookupEntry.lift(returnValue!!))
        } catch (e: Throwable) {
            continuation.resumeWithException(e)
        }
    }
}

internal class UniFfiFutureCallbackHandlerSequenceTypeLookupEntry_TypeDbError(val continuation: Continuation<List<LookupEntry>>) :
    UniFfiFutureCallbackRustBuffer {
    override fun invoke(_callbackData: USize, returnValue: RustBuffer.ByValue?, callStatus: RustCallStatus.ByValue) {
        try {
            checkCallStatus(DbException, callStatus)
            continuation.resume(FfiConverterSequenceTypeLookupEntry.lift(returnValue!!))
        } catch (e: Throwable) {
            continuation.resumeWithException(e)
        }
    }
}

internal class UniFfiFutureCallbackHandlerSequenceTypeSearchResult_TypeDbError(val continuation: Continuation<List<SearchResult>>) :
    UniFfiFutureCallbackRustBuffer {
    override fun invoke(_callbackData: USize, returnValue: RustBuffer.ByValue?, callStatus: RustCallStatus.ByValue) {
        try {
            checkCallStatus(DbException, callStatus)
            continuation.resume(FfiConverterSequenceTypeSearchResult.lift(returnValue!!))
        } catch (e: Throwable) {
            continuation.resumeWithException(e)
        }
    }
}
