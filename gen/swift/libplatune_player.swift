// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(libplatune_playerFFI)
    import libplatune_playerFFI
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_libplatune_player_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_libplatune_player_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

private func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
private func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset ..< reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value) { reader.data.copyBytes(to: $0, from: range) }
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
private func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> [UInt8] {
    let range = reader.offset ..< (reader.offset + count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer { buffer in
        reader.data.copyBytes(to: buffer, from: range)
    }
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
private func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return try Float(bitPattern: readInt(&reader))
}

// Reads a float at the current offset.
private func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return try Double(bitPattern: readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
private func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

private func createWriter() -> [UInt8] {
    return []
}

private func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
private func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

private func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

private func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
private protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType {}

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
private protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
        var writer = createWriter()
        write(value, into: &writer)
        return RustBuffer(bytes: writer)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_PANIC: Int8 = 2

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T
) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
    case CALL_SUCCESS:
        return

    case CALL_ERROR:
        if let errorHandler = errorHandler {
            throw try errorHandler(callStatus.errorBuf)
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.unexpectedRustCallError
        }

    case CALL_PANIC:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw try UniffiInternalError.rustPanic(FfiConverterString.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.

private struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterDouble: FfiConverterPrimitive {
    typealias FfiType = Double
    typealias SwiftType = Double

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Double {
        return try lift(readDouble(&buf))
    }

    public static func write(_ value: Double, into buf: inout [UInt8]) {
        writeDouble(&buf, lower(value))
    }
}

private struct FfiConverterBool: FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return try String(bytes: readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

private struct FfiConverterDuration: FfiConverterRustBuffer {
    typealias SwiftType = TimeInterval

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TimeInterval {
        let seconds: UInt64 = try readInt(&buf)
        let nanoseconds: UInt32 = try readInt(&buf)
        return Double(seconds) + (Double(nanoseconds) / 1.0e9)
    }

    public static func write(_ value: TimeInterval, into buf: inout [UInt8]) {
        if value.rounded(.down) > Double(Int64.max) {
            fatalError("Duration overflow, exceeds max bounds supported by Uniffi")
        }

        if value < 0 {
            fatalError("Invalid duration, must be non-negative")
        }

        let seconds = UInt64(value)
        let nanoseconds = UInt32((value - Double(seconds)) * 1.0e9)
        writeInt(&buf, seconds)
        writeInt(&buf, nanoseconds)
    }
}

public protocol EventSubscriptionProtocol {
    func recv() async throws -> PlayerEvent
}

public class EventSubscription: EventSubscriptionProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_libplatune_player_fn_free_eventsubscription(pointer, $0) }
    }

    public func recv() async throws -> PlayerEvent {
        // Suspend the function and call the scaffolding function, passing it a callback handler from
        // `AsyncTypes.swift`
        //
        // Make sure to hold on to a reference to the continuation in the top-level scope so that
        // it's not freed before the callback is invoked.
        var continuation: CheckedContinuation<PlayerEvent, Error>? = nil
        return try await withCheckedThrowingContinuation {
            continuation = $0
            try! rustCall {
                uniffi_libplatune_player_fn_method_eventsubscription_recv(
                    self.pointer,

                    FfiConverterForeignExecutor.lower(UniFfiForeignExecutor()),
                    uniffiFutureCallbackHandlerTypePlayerEventTypePlayerError,
                    &continuation,
                    $0
                )
            }
        }
    }
}

public struct FfiConverterTypeEventSubscription: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = EventSubscription

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> EventSubscription {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: EventSubscription, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> EventSubscription {
        return EventSubscription(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: EventSubscription) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeEventSubscription_lift(_ pointer: UnsafeMutableRawPointer) throws -> EventSubscription {
    return try FfiConverterTypeEventSubscription.lift(pointer)
}

public func FfiConverterTypeEventSubscription_lower(_ value: EventSubscription) -> UnsafeMutableRawPointer {
    return FfiConverterTypeEventSubscription.lower(value)
}

public protocol PlatunePlayerProtocol {
    func addToQueue(songs: [String]) async throws
    func getCurrentStatus() async throws -> PlayerStatus
    func next() async throws
    func pause() async throws
    func previous() async throws
    func resume() async throws
    func seek(time: TimeInterval) async throws
    func setQueue(queue: [String]) async throws
    func setVolume(volume: Double) async throws
    func stop() async throws
}

public class PlatunePlayer: PlatunePlayerProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_libplatune_player_fn_free_platuneplayer(pointer, $0) }
    }

    public func addToQueue(songs: [String]) async throws {
        // Suspend the function and call the scaffolding function, passing it a callback handler from
        // `AsyncTypes.swift`
        //
        // Make sure to hold on to a reference to the continuation in the top-level scope so that
        // it's not freed before the callback is invoked.
        var continuation: CheckedContinuation<Void, Error>? = nil
        return try await withCheckedThrowingContinuation {
            continuation = $0
            try! rustCall {
                uniffi_libplatune_player_fn_method_platuneplayer_add_to_queue(
                    self.pointer,

                    FfiConverterSequenceString.lower(songs),
                    FfiConverterForeignExecutor.lower(UniFfiForeignExecutor()),
                    uniffiFutureCallbackHandlerVoidTypePlayerError,
                    &continuation,
                    $0
                )
            }
        }
    }

    public func getCurrentStatus() async throws -> PlayerStatus {
        // Suspend the function and call the scaffolding function, passing it a callback handler from
        // `AsyncTypes.swift`
        //
        // Make sure to hold on to a reference to the continuation in the top-level scope so that
        // it's not freed before the callback is invoked.
        var continuation: CheckedContinuation<PlayerStatus, Error>? = nil
        return try await withCheckedThrowingContinuation {
            continuation = $0
            try! rustCall {
                uniffi_libplatune_player_fn_method_platuneplayer_get_current_status(
                    self.pointer,

                    FfiConverterForeignExecutor.lower(UniFfiForeignExecutor()),
                    uniffiFutureCallbackHandlerTypePlayerStatusTypePlayerError,
                    &continuation,
                    $0
                )
            }
        }
    }

    public func next() async throws {
        // Suspend the function and call the scaffolding function, passing it a callback handler from
        // `AsyncTypes.swift`
        //
        // Make sure to hold on to a reference to the continuation in the top-level scope so that
        // it's not freed before the callback is invoked.
        var continuation: CheckedContinuation<Void, Error>? = nil
        return try await withCheckedThrowingContinuation {
            continuation = $0
            try! rustCall {
                uniffi_libplatune_player_fn_method_platuneplayer_next(
                    self.pointer,

                    FfiConverterForeignExecutor.lower(UniFfiForeignExecutor()),
                    uniffiFutureCallbackHandlerVoidTypePlayerError,
                    &continuation,
                    $0
                )
            }
        }
    }

    public func pause() async throws {
        // Suspend the function and call the scaffolding function, passing it a callback handler from
        // `AsyncTypes.swift`
        //
        // Make sure to hold on to a reference to the continuation in the top-level scope so that
        // it's not freed before the callback is invoked.
        var continuation: CheckedContinuation<Void, Error>? = nil
        return try await withCheckedThrowingContinuation {
            continuation = $0
            try! rustCall {
                uniffi_libplatune_player_fn_method_platuneplayer_pause(
                    self.pointer,

                    FfiConverterForeignExecutor.lower(UniFfiForeignExecutor()),
                    uniffiFutureCallbackHandlerVoidTypePlayerError,
                    &continuation,
                    $0
                )
            }
        }
    }

    public func previous() async throws {
        // Suspend the function and call the scaffolding function, passing it a callback handler from
        // `AsyncTypes.swift`
        //
        // Make sure to hold on to a reference to the continuation in the top-level scope so that
        // it's not freed before the callback is invoked.
        var continuation: CheckedContinuation<Void, Error>? = nil
        return try await withCheckedThrowingContinuation {
            continuation = $0
            try! rustCall {
                uniffi_libplatune_player_fn_method_platuneplayer_previous(
                    self.pointer,

                    FfiConverterForeignExecutor.lower(UniFfiForeignExecutor()),
                    uniffiFutureCallbackHandlerVoidTypePlayerError,
                    &continuation,
                    $0
                )
            }
        }
    }

    public func resume() async throws {
        // Suspend the function and call the scaffolding function, passing it a callback handler from
        // `AsyncTypes.swift`
        //
        // Make sure to hold on to a reference to the continuation in the top-level scope so that
        // it's not freed before the callback is invoked.
        var continuation: CheckedContinuation<Void, Error>? = nil
        return try await withCheckedThrowingContinuation {
            continuation = $0
            try! rustCall {
                uniffi_libplatune_player_fn_method_platuneplayer_resume(
                    self.pointer,

                    FfiConverterForeignExecutor.lower(UniFfiForeignExecutor()),
                    uniffiFutureCallbackHandlerVoidTypePlayerError,
                    &continuation,
                    $0
                )
            }
        }
    }

    public func seek(time: TimeInterval) async throws {
        // Suspend the function and call the scaffolding function, passing it a callback handler from
        // `AsyncTypes.swift`
        //
        // Make sure to hold on to a reference to the continuation in the top-level scope so that
        // it's not freed before the callback is invoked.
        var continuation: CheckedContinuation<Void, Error>? = nil
        return try await withCheckedThrowingContinuation {
            continuation = $0
            try! rustCall {
                uniffi_libplatune_player_fn_method_platuneplayer_seek(
                    self.pointer,

                    FfiConverterDuration.lower(time),
                    FfiConverterForeignExecutor.lower(UniFfiForeignExecutor()),
                    uniffiFutureCallbackHandlerVoidTypePlayerError,
                    &continuation,
                    $0
                )
            }
        }
    }

    public func setQueue(queue: [String]) async throws {
        // Suspend the function and call the scaffolding function, passing it a callback handler from
        // `AsyncTypes.swift`
        //
        // Make sure to hold on to a reference to the continuation in the top-level scope so that
        // it's not freed before the callback is invoked.
        var continuation: CheckedContinuation<Void, Error>? = nil
        return try await withCheckedThrowingContinuation {
            continuation = $0
            try! rustCall {
                uniffi_libplatune_player_fn_method_platuneplayer_set_queue(
                    self.pointer,

                    FfiConverterSequenceString.lower(queue),
                    FfiConverterForeignExecutor.lower(UniFfiForeignExecutor()),
                    uniffiFutureCallbackHandlerVoidTypePlayerError,
                    &continuation,
                    $0
                )
            }
        }
    }

    public func setVolume(volume: Double) async throws {
        // Suspend the function and call the scaffolding function, passing it a callback handler from
        // `AsyncTypes.swift`
        //
        // Make sure to hold on to a reference to the continuation in the top-level scope so that
        // it's not freed before the callback is invoked.
        var continuation: CheckedContinuation<Void, Error>? = nil
        return try await withCheckedThrowingContinuation {
            continuation = $0
            try! rustCall {
                uniffi_libplatune_player_fn_method_platuneplayer_set_volume(
                    self.pointer,

                    FfiConverterDouble.lower(volume),
                    FfiConverterForeignExecutor.lower(UniFfiForeignExecutor()),
                    uniffiFutureCallbackHandlerVoidTypePlayerError,
                    &continuation,
                    $0
                )
            }
        }
    }

    public func stop() async throws {
        // Suspend the function and call the scaffolding function, passing it a callback handler from
        // `AsyncTypes.swift`
        //
        // Make sure to hold on to a reference to the continuation in the top-level scope so that
        // it's not freed before the callback is invoked.
        var continuation: CheckedContinuation<Void, Error>? = nil
        return try await withCheckedThrowingContinuation {
            continuation = $0
            try! rustCall {
                uniffi_libplatune_player_fn_method_platuneplayer_stop(
                    self.pointer,

                    FfiConverterForeignExecutor.lower(UniFfiForeignExecutor()),
                    uniffiFutureCallbackHandlerVoidTypePlayerError,
                    &continuation,
                    $0
                )
            }
        }
    }
}

public struct FfiConverterTypePlatunePlayer: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = PlatunePlayer

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PlatunePlayer {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: PlatunePlayer, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> PlatunePlayer {
        return PlatunePlayer(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: PlatunePlayer) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypePlatunePlayer_lift(_ pointer: UnsafeMutableRawPointer) throws -> PlatunePlayer {
    return try FfiConverterTypePlatunePlayer.lift(pointer)
}

public func FfiConverterTypePlatunePlayer_lower(_ value: PlatunePlayer) -> UnsafeMutableRawPointer {
    return FfiConverterTypePlatunePlayer.lower(value)
}

// Encapsulates an executor that can run Rust tasks
//
// On Swift, `Task.detached` can handle this we just need to know what priority to send it.
public struct UniFfiForeignExecutor {
    var priority: TaskPriority

    public init(priority: TaskPriority) {
        self.priority = priority
    }

    public init() {
        priority = Task.currentPriority
    }
}

private struct FfiConverterForeignExecutor: FfiConverter {
    typealias SwiftType = UniFfiForeignExecutor
    // Rust uses a pointer to represent the FfiConverterForeignExecutor, but we only need a u8.
    // let's use `Int`, which is equivalent to `size_t`
    typealias FfiType = Int

    static func lift(_ value: FfiType) throws -> SwiftType {
        UniFfiForeignExecutor(priority: TaskPriority(rawValue: numericCast(value)))
    }

    static func lower(_ value: SwiftType) -> FfiType {
        numericCast(value.priority.rawValue)
    }

    static func read(from _: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        fatalError("FfiConverterForeignExecutor.read not implemented yet")
    }

    static func write(_: SwiftType, into _: inout [UInt8]) {
        fatalError("FfiConverterForeignExecutor.read not implemented yet")
    }
}

private func uniffiForeignExecutorCallback(executorHandle: Int, delayMs: UInt32, rustTask: UniFfiRustTaskCallback?, taskData: UnsafeRawPointer?) {
    if let rustTask = rustTask {
        let executor = try! FfiConverterForeignExecutor.lift(executorHandle)
        Task.detached(priority: executor.priority) {
            if delayMs != 0 {
                let nanoseconds: UInt64 = numericCast(delayMs * 1_000_000)
                try! await Task.sleep(nanoseconds: nanoseconds)
            }
            rustTask(taskData)
        }
    }
    // No else branch: when rustTask is null, we should drop the foreign executor. However, since
    // its just a value type, we don't need to do anything here.
}

private func uniffiInitForeignExecutor() {
    uniffi_foreign_executor_callback_set(uniffiForeignExecutorCallback)
}

public struct CurrentPosition {
    public var position: TimeInterval
    public var retrievalTime: TimeInterval?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(position: TimeInterval, retrievalTime: TimeInterval?) {
        self.position = position
        self.retrievalTime = retrievalTime
    }
}

extension CurrentPosition: Equatable, Hashable {
    public static func == (lhs: CurrentPosition, rhs: CurrentPosition) -> Bool {
        if lhs.position != rhs.position {
            return false
        }
        if lhs.retrievalTime != rhs.retrievalTime {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(position)
        hasher.combine(retrievalTime)
    }
}

public struct FfiConverterTypeCurrentPosition: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CurrentPosition {
        return try CurrentPosition(
            position: FfiConverterDuration.read(from: &buf),
            retrievalTime: FfiConverterOptionDuration.read(from: &buf)
        )
    }

    public static func write(_ value: CurrentPosition, into buf: inout [UInt8]) {
        FfiConverterDuration.write(value.position, into: &buf)
        FfiConverterOptionDuration.write(value.retrievalTime, into: &buf)
    }
}

public func FfiConverterTypeCurrentPosition_lift(_ buf: RustBuffer) throws -> CurrentPosition {
    return try FfiConverterTypeCurrentPosition.lift(buf)
}

public func FfiConverterTypeCurrentPosition_lower(_ value: CurrentPosition) -> RustBuffer {
    return FfiConverterTypeCurrentPosition.lower(value)
}

public struct PlayerState {
    public var volume: Double
    public var queue: [String]
    public var queuePosition: UInt32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(volume: Double, queue: [String], queuePosition: UInt32) {
        self.volume = volume
        self.queue = queue
        self.queuePosition = queuePosition
    }
}

extension PlayerState: Equatable, Hashable {
    public static func == (lhs: PlayerState, rhs: PlayerState) -> Bool {
        if lhs.volume != rhs.volume {
            return false
        }
        if lhs.queue != rhs.queue {
            return false
        }
        if lhs.queuePosition != rhs.queuePosition {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(volume)
        hasher.combine(queue)
        hasher.combine(queuePosition)
    }
}

public struct FfiConverterTypePlayerState: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PlayerState {
        return try PlayerState(
            volume: FfiConverterDouble.read(from: &buf),
            queue: FfiConverterSequenceString.read(from: &buf),
            queuePosition: FfiConverterUInt32.read(from: &buf)
        )
    }

    public static func write(_ value: PlayerState, into buf: inout [UInt8]) {
        FfiConverterDouble.write(value.volume, into: &buf)
        FfiConverterSequenceString.write(value.queue, into: &buf)
        FfiConverterUInt32.write(value.queuePosition, into: &buf)
    }
}

public func FfiConverterTypePlayerState_lift(_ buf: RustBuffer) throws -> PlayerState {
    return try FfiConverterTypePlayerState.lift(buf)
}

public func FfiConverterTypePlayerState_lower(_ value: PlayerState) -> RustBuffer {
    return FfiConverterTypePlayerState.lower(value)
}

public struct PlayerStatus {
    public var trackStatus: TrackStatus
    public var currentPosition: CurrentPosition?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(trackStatus: TrackStatus, currentPosition: CurrentPosition?) {
        self.trackStatus = trackStatus
        self.currentPosition = currentPosition
    }
}

extension PlayerStatus: Equatable, Hashable {
    public static func == (lhs: PlayerStatus, rhs: PlayerStatus) -> Bool {
        if lhs.trackStatus != rhs.trackStatus {
            return false
        }
        if lhs.currentPosition != rhs.currentPosition {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(trackStatus)
        hasher.combine(currentPosition)
    }
}

public struct FfiConverterTypePlayerStatus: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PlayerStatus {
        return try PlayerStatus(
            trackStatus: FfiConverterTypeTrackStatus.read(from: &buf),
            currentPosition: FfiConverterOptionTypeCurrentPosition.read(from: &buf)
        )
    }

    public static func write(_ value: PlayerStatus, into buf: inout [UInt8]) {
        FfiConverterTypeTrackStatus.write(value.trackStatus, into: &buf)
        FfiConverterOptionTypeCurrentPosition.write(value.currentPosition, into: &buf)
    }
}

public func FfiConverterTypePlayerStatus_lift(_ buf: RustBuffer) throws -> PlayerStatus {
    return try FfiConverterTypePlayerStatus.lift(buf)
}

public func FfiConverterTypePlayerStatus_lower(_ value: PlayerStatus) -> RustBuffer {
    return FfiConverterTypePlayerStatus.lower(value)
}

public struct Settings {
    public var enableResampling: Bool
    public var resampleChunkSize: UInt32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(enableResampling: Bool, resampleChunkSize: UInt32) {
        self.enableResampling = enableResampling
        self.resampleChunkSize = resampleChunkSize
    }
}

extension Settings: Equatable, Hashable {
    public static func == (lhs: Settings, rhs: Settings) -> Bool {
        if lhs.enableResampling != rhs.enableResampling {
            return false
        }
        if lhs.resampleChunkSize != rhs.resampleChunkSize {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(enableResampling)
        hasher.combine(resampleChunkSize)
    }
}

public struct FfiConverterTypeSettings: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Settings {
        return try Settings(
            enableResampling: FfiConverterBool.read(from: &buf),
            resampleChunkSize: FfiConverterUInt32.read(from: &buf)
        )
    }

    public static func write(_ value: Settings, into buf: inout [UInt8]) {
        FfiConverterBool.write(value.enableResampling, into: &buf)
        FfiConverterUInt32.write(value.resampleChunkSize, into: &buf)
    }
}

public func FfiConverterTypeSettings_lift(_ buf: RustBuffer) throws -> Settings {
    return try FfiConverterTypeSettings.lift(buf)
}

public func FfiConverterTypeSettings_lower(_ value: Settings) -> RustBuffer {
    return FfiConverterTypeSettings.lower(value)
}

public struct TrackStatus {
    public var status: AudioStatus
    public var currentSong: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(status: AudioStatus, currentSong: String?) {
        self.status = status
        self.currentSong = currentSong
    }
}

extension TrackStatus: Equatable, Hashable {
    public static func == (lhs: TrackStatus, rhs: TrackStatus) -> Bool {
        if lhs.status != rhs.status {
            return false
        }
        if lhs.currentSong != rhs.currentSong {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(status)
        hasher.combine(currentSong)
    }
}

public struct FfiConverterTypeTrackStatus: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TrackStatus {
        return try TrackStatus(
            status: FfiConverterTypeAudioStatus.read(from: &buf),
            currentSong: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: TrackStatus, into buf: inout [UInt8]) {
        FfiConverterTypeAudioStatus.write(value.status, into: &buf)
        FfiConverterOptionString.write(value.currentSong, into: &buf)
    }
}

public func FfiConverterTypeTrackStatus_lift(_ buf: RustBuffer) throws -> TrackStatus {
    return try FfiConverterTypeTrackStatus.lift(buf)
}

public func FfiConverterTypeTrackStatus_lower(_ value: TrackStatus) -> RustBuffer {
    return FfiConverterTypeTrackStatus.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum AudioStatus {
    case playing
    case paused
    case stopped
}

public struct FfiConverterTypeAudioStatus: FfiConverterRustBuffer {
    typealias SwiftType = AudioStatus

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AudioStatus {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .playing

        case 2: return .paused

        case 3: return .stopped

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AudioStatus, into buf: inout [UInt8]) {
        switch value {
        case .playing:
            writeInt(&buf, Int32(1))

        case .paused:
            writeInt(&buf, Int32(2))

        case .stopped:
            writeInt(&buf, Int32(3))
        }
    }
}

public func FfiConverterTypeAudioStatus_lift(_ buf: RustBuffer) throws -> AudioStatus {
    return try FfiConverterTypeAudioStatus.lift(buf)
}

public func FfiConverterTypeAudioStatus_lower(_ value: AudioStatus) -> RustBuffer {
    return FfiConverterTypeAudioStatus.lower(value)
}

extension AudioStatus: Equatable, Hashable {}

public enum PlayerError {
    // Simple error enums only carry a message
    case Failure(message: String)

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypePlayerError.lift(error)
    }
}

public struct FfiConverterTypePlayerError: FfiConverterRustBuffer {
    typealias SwiftType = PlayerError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PlayerError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .Failure(
                message: FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: PlayerError, into buf: inout [UInt8]) {
        switch value {
        case let .Failure(message):
            writeInt(&buf, Int32(1))
        }
    }
}

extension PlayerError: Equatable, Hashable {}

extension PlayerError: Error {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum PlayerEvent {
    case startQueue(state: PlayerState)
    case queueUpdated(state: PlayerState)
    case stop(state: PlayerState)
    case pause(state: PlayerState)
    case resume(state: PlayerState)
    case ended(state: PlayerState)
    case next(state: PlayerState)
    case previous(state: PlayerState)
    case setVolume(state: PlayerState)
    case seek(state: PlayerState, time: TimeInterval)
    case queueEnded(state: PlayerState)
    case position(currentPosition: CurrentPosition)
}

public struct FfiConverterTypePlayerEvent: FfiConverterRustBuffer {
    typealias SwiftType = PlayerEvent

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PlayerEvent {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .startQueue(
                state: FfiConverterTypePlayerState.read(from: &buf)
            )

        case 2: return try .queueUpdated(
                state: FfiConverterTypePlayerState.read(from: &buf)
            )

        case 3: return try .stop(
                state: FfiConverterTypePlayerState.read(from: &buf)
            )

        case 4: return try .pause(
                state: FfiConverterTypePlayerState.read(from: &buf)
            )

        case 5: return try .resume(
                state: FfiConverterTypePlayerState.read(from: &buf)
            )

        case 6: return try .ended(
                state: FfiConverterTypePlayerState.read(from: &buf)
            )

        case 7: return try .next(
                state: FfiConverterTypePlayerState.read(from: &buf)
            )

        case 8: return try .previous(
                state: FfiConverterTypePlayerState.read(from: &buf)
            )

        case 9: return try .setVolume(
                state: FfiConverterTypePlayerState.read(from: &buf)
            )

        case 10: return try .seek(
                state: FfiConverterTypePlayerState.read(from: &buf),
                time: FfiConverterDuration.read(from: &buf)
            )

        case 11: return try .queueEnded(
                state: FfiConverterTypePlayerState.read(from: &buf)
            )

        case 12: return try .position(
                currentPosition: FfiConverterTypeCurrentPosition.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: PlayerEvent, into buf: inout [UInt8]) {
        switch value {
        case let .startQueue(state):
            writeInt(&buf, Int32(1))
            FfiConverterTypePlayerState.write(state, into: &buf)

        case let .queueUpdated(state):
            writeInt(&buf, Int32(2))
            FfiConverterTypePlayerState.write(state, into: &buf)

        case let .stop(state):
            writeInt(&buf, Int32(3))
            FfiConverterTypePlayerState.write(state, into: &buf)

        case let .pause(state):
            writeInt(&buf, Int32(4))
            FfiConverterTypePlayerState.write(state, into: &buf)

        case let .resume(state):
            writeInt(&buf, Int32(5))
            FfiConverterTypePlayerState.write(state, into: &buf)

        case let .ended(state):
            writeInt(&buf, Int32(6))
            FfiConverterTypePlayerState.write(state, into: &buf)

        case let .next(state):
            writeInt(&buf, Int32(7))
            FfiConverterTypePlayerState.write(state, into: &buf)

        case let .previous(state):
            writeInt(&buf, Int32(8))
            FfiConverterTypePlayerState.write(state, into: &buf)

        case let .setVolume(state):
            writeInt(&buf, Int32(9))
            FfiConverterTypePlayerState.write(state, into: &buf)

        case let .seek(state, time):
            writeInt(&buf, Int32(10))
            FfiConverterTypePlayerState.write(state, into: &buf)
            FfiConverterDuration.write(time, into: &buf)

        case let .queueEnded(state):
            writeInt(&buf, Int32(11))
            FfiConverterTypePlayerState.write(state, into: &buf)

        case let .position(currentPosition):
            writeInt(&buf, Int32(12))
            FfiConverterTypeCurrentPosition.write(currentPosition, into: &buf)
        }
    }
}

public func FfiConverterTypePlayerEvent_lift(_ buf: RustBuffer) throws -> PlayerEvent {
    return try FfiConverterTypePlayerEvent.lift(buf)
}

public func FfiConverterTypePlayerEvent_lower(_ value: PlayerEvent) -> RustBuffer {
    return FfiConverterTypePlayerEvent.lower(value)
}

extension PlayerEvent: Equatable, Hashable {}

private struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionDuration: FfiConverterRustBuffer {
    typealias SwiftType = TimeInterval?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterDuration.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterDuration.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeCurrentPosition: FfiConverterRustBuffer {
    typealias SwiftType = CurrentPosition?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeCurrentPosition.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeCurrentPosition.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterString.read(from: &buf))
        }
        return seq
    }
} // Callbacks for async functions

// Callback handlers for an async calls.  These are invoked by Rust when the future is ready.  They
// lift the return value or error and resume the suspended function.
private func uniffiFutureCallbackHandlerVoidTypePlayerError(
    rawContinutation: UnsafeRawPointer,
    returnValue _: UInt8,
    callStatus: RustCallStatus
) {
    let continuation = rawContinutation.bindMemory(
        to: CheckedContinuation<Void, Error>.self,
        capacity: 1
    )

    do {
        try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: FfiConverterTypePlayerError.lift)
        continuation.pointee.resume(returning: ())
    } catch {
        continuation.pointee.resume(throwing: error)
    }
}

private func uniffiFutureCallbackHandlerTypePlayerStatusTypePlayerError(
    rawContinutation: UnsafeRawPointer,
    returnValue: RustBuffer,
    callStatus: RustCallStatus
) {
    let continuation = rawContinutation.bindMemory(
        to: CheckedContinuation<PlayerStatus, Error>.self,
        capacity: 1
    )

    do {
        try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: FfiConverterTypePlayerError.lift)
        try continuation.pointee.resume(returning: FfiConverterTypePlayerStatus.lift(returnValue))
    } catch {
        continuation.pointee.resume(throwing: error)
    }
}

private func uniffiFutureCallbackHandlerTypePlayerEventTypePlayerError(
    rawContinutation: UnsafeRawPointer,
    returnValue: RustBuffer,
    callStatus: RustCallStatus
) {
    let continuation = rawContinutation.bindMemory(
        to: CheckedContinuation<PlayerEvent, Error>.self,
        capacity: 1
    )

    do {
        try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: FfiConverterTypePlayerError.lift)
        try continuation.pointee.resume(returning: FfiConverterTypePlayerEvent.lift(returnValue))
    } catch {
        continuation.pointee.resume(throwing: error)
    }
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}

// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 22
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_libplatune_player_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if uniffi_libplatune_player_checksum_method_eventsubscription_recv() != 33525 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_libplatune_player_checksum_method_platuneplayer_add_to_queue() != 14061 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_libplatune_player_checksum_method_platuneplayer_get_current_status() != 5422 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_libplatune_player_checksum_method_platuneplayer_next() != 20413 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_libplatune_player_checksum_method_platuneplayer_pause() != 25599 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_libplatune_player_checksum_method_platuneplayer_previous() != 32253 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_libplatune_player_checksum_method_platuneplayer_resume() != 37295 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_libplatune_player_checksum_method_platuneplayer_seek() != 37549 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_libplatune_player_checksum_method_platuneplayer_set_queue() != 3854 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_libplatune_player_checksum_method_platuneplayer_set_volume() != 25171 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_libplatune_player_checksum_method_platuneplayer_stop() != 27900 {
        return InitializationResult.apiChecksumMismatch
    }

    uniffiInitForeignExecutor()
    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}
