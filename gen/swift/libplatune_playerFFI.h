// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

#pragma once

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

// The following structs are used to implement the lowest level
// of the FFI, and thus useful to multiple uniffied crates.
// We ensure they are declared exactly once, with a header guard, UNIFFI_SHARED_H.
#ifdef UNIFFI_SHARED_H
    // We also try to prevent mixing versions of shared uniffi header structs.
    // If you add anything to the #else block, you must increment the version suffix in UNIFFI_SHARED_HEADER_V4
    #ifndef UNIFFI_SHARED_HEADER_V4
        #error Combining helper code from multiple versions of uniffi is not supported
    #endif // ndef UNIFFI_SHARED_HEADER_V4
#else
#define UNIFFI_SHARED_H
#define UNIFFI_SHARED_HEADER_V4
// ⚠️ Attention: If you change this #else block (ending in `#endif // def UNIFFI_SHARED_H`) you *must* ⚠️
// ⚠️ increment the version suffix in all instances of UNIFFI_SHARED_HEADER_V4 in this file.           ⚠️

typedef struct RustBuffer
{
    int32_t capacity;
    int32_t len;
    uint8_t *_Nullable data;
} RustBuffer;

typedef int32_t (*ForeignCallback)(uint64_t, int32_t, const uint8_t *_Nonnull, int32_t, RustBuffer *_Nonnull);

// Task defined in Rust that Swift executes
typedef void (*UniFfiRustTaskCallback)(const void * _Nullable);

// Callback to execute Rust tasks using a Swift Task
//
// Args:
//   executor: ForeignExecutor lowered into a size_t value
//   delay: Delay in MS
//   task: UniFfiRustTaskCallback to call
//   task_data: data to pass the task callback
typedef void (*UniFfiForeignExecutorCallback)(size_t, uint32_t, UniFfiRustTaskCallback _Nullable, const void * _Nullable);

typedef struct ForeignBytes
{
    int32_t len;
    const uint8_t *_Nullable data;
} ForeignBytes;

// Error definitions
typedef struct RustCallStatus {
    int8_t code;
    RustBuffer errorBuf;
} RustCallStatus;

// ⚠️ Attention: If you change this #else block (ending in `#endif // def UNIFFI_SHARED_H`) you *must* ⚠️
// ⚠️ increment the version suffix in all instances of UNIFFI_SHARED_HEADER_V4 in this file.           ⚠️
#endif // def UNIFFI_SHARED_H

// Callbacks for UniFFI Futures
typedef void (*UniFfiFutureCallbackUInt8)(const void * _Nonnull, uint8_t, RustCallStatus);
typedef void (*UniFfiFutureCallbackUnsafeMutableRawPointer)(const void * _Nonnull, void*_Nonnull, RustCallStatus);
typedef void (*UniFfiFutureCallbackUnsafeMutableRawPointer)(const void * _Nonnull, void*_Nonnull, RustCallStatus);
typedef void (*UniFfiFutureCallbackRustBuffer)(const void * _Nonnull, RustBuffer, RustCallStatus);

// Scaffolding functions
void uniffi_libplatune_player_fn_free_eventsubscription(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_libplatune_player_fn_method_eventsubscription_recv(void*_Nonnull ptr, size_t uniffi_executor, UniFfiFutureCallbackRustBuffer _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_libplatune_player_fn_free_platuneplayer(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_libplatune_player_fn_constructor_platuneplayer_new(RustBuffer settings, RustCallStatus *_Nonnull out_status
);
void uniffi_libplatune_player_fn_method_platuneplayer_add_to_queue(void*_Nonnull ptr, RustBuffer songs, size_t uniffi_executor, UniFfiFutureCallbackUInt8 _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_libplatune_player_fn_method_platuneplayer_get_current_status(void*_Nonnull ptr, size_t uniffi_executor, UniFfiFutureCallbackRustBuffer _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_libplatune_player_fn_method_platuneplayer_join(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_libplatune_player_fn_method_platuneplayer_next(void*_Nonnull ptr, size_t uniffi_executor, UniFfiFutureCallbackUInt8 _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_libplatune_player_fn_method_platuneplayer_pause(void*_Nonnull ptr, size_t uniffi_executor, UniFfiFutureCallbackUInt8 _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_libplatune_player_fn_method_platuneplayer_previous(void*_Nonnull ptr, size_t uniffi_executor, UniFfiFutureCallbackUInt8 _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_libplatune_player_fn_method_platuneplayer_resume(void*_Nonnull ptr, size_t uniffi_executor, UniFfiFutureCallbackUInt8 _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_libplatune_player_fn_method_platuneplayer_seek(void*_Nonnull ptr, RustBuffer time, size_t uniffi_executor, UniFfiFutureCallbackUInt8 _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_libplatune_player_fn_method_platuneplayer_set_queue(void*_Nonnull ptr, RustBuffer queue, size_t uniffi_executor, UniFfiFutureCallbackUInt8 _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_libplatune_player_fn_method_platuneplayer_set_volume(void*_Nonnull ptr, double volume, size_t uniffi_executor, UniFfiFutureCallbackUInt8 _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void uniffi_libplatune_player_fn_method_platuneplayer_stop(void*_Nonnull ptr, size_t uniffi_executor, UniFfiFutureCallbackUInt8 _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_libplatune_player_fn_method_platuneplayer_subscribe(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer ffi_libplatune_player_rustbuffer_alloc(int32_t size, RustCallStatus *_Nonnull out_status
);
RustBuffer ffi_libplatune_player_rustbuffer_from_bytes(ForeignBytes bytes, RustCallStatus *_Nonnull out_status
);
void ffi_libplatune_player_rustbuffer_free(RustBuffer buf, RustCallStatus *_Nonnull out_status
);
RustBuffer ffi_libplatune_player_rustbuffer_reserve(RustBuffer buf, int32_t additional, RustCallStatus *_Nonnull out_status
);
uint16_t uniffi_libplatune_player_checksum_method_eventsubscription_recv(void
    
);
uint16_t uniffi_libplatune_player_checksum_method_platuneplayer_add_to_queue(void
    
);
uint16_t uniffi_libplatune_player_checksum_method_platuneplayer_get_current_status(void
    
);
uint16_t uniffi_libplatune_player_checksum_method_platuneplayer_join(void
    
);
uint16_t uniffi_libplatune_player_checksum_method_platuneplayer_next(void
    
);
uint16_t uniffi_libplatune_player_checksum_method_platuneplayer_pause(void
    
);
uint16_t uniffi_libplatune_player_checksum_method_platuneplayer_previous(void
    
);
uint16_t uniffi_libplatune_player_checksum_method_platuneplayer_resume(void
    
);
uint16_t uniffi_libplatune_player_checksum_method_platuneplayer_seek(void
    
);
uint16_t uniffi_libplatune_player_checksum_method_platuneplayer_set_queue(void
    
);
uint16_t uniffi_libplatune_player_checksum_method_platuneplayer_set_volume(void
    
);
uint16_t uniffi_libplatune_player_checksum_method_platuneplayer_stop(void
    
);
uint16_t uniffi_libplatune_player_checksum_method_platuneplayer_subscribe(void
    
);
uint16_t uniffi_libplatune_player_checksum_constructor_platuneplayer_new(void
    
);
void uniffi_foreign_executor_callback_set(UniFfiForeignExecutorCallback _Nonnull callback
);
uint32_t ffi_libplatune_player_uniffi_contract_version(void
    
);

