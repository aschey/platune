// Code generated by MockGen. DO NOT EDIT.
// Source: ./../platuned/client/go/management_rpc_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -package=test -source=./../platuned/client/go/management_rpc_grpc.pb.go
//

// Package test is a generated GoMock package.
package test

import (
	context "context"
	reflect "reflect"

	platune "github.com/aschey/platune/client"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockManagementClient is a mock of ManagementClient interface.
type MockManagementClient struct {
	ctrl     *gomock.Controller
	recorder *MockManagementClientMockRecorder
	isgomock struct{}
}

// MockManagementClientMockRecorder is the mock recorder for MockManagementClient.
type MockManagementClientMockRecorder struct {
	mock *MockManagementClient
}

// NewMockManagementClient creates a new mock instance.
func NewMockManagementClient(ctrl *gomock.Controller) *MockManagementClient {
	mock := &MockManagementClient{ctrl: ctrl}
	mock.recorder = &MockManagementClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagementClient) EXPECT() *MockManagementClientMockRecorder {
	return m.recorder
}

// AddFolders mocks base method.
func (m *MockManagementClient) AddFolders(ctx context.Context, in *platune.FoldersMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddFolders", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFolders indicates an expected call of AddFolders.
func (mr *MockManagementClientMockRecorder) AddFolders(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFolders", reflect.TypeOf((*MockManagementClient)(nil).AddFolders), varargs...)
}

// DeleteTracks mocks base method.
func (m *MockManagementClient) DeleteTracks(ctx context.Context, in *platune.IdMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTracks", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTracks indicates an expected call of DeleteTracks.
func (mr *MockManagementClientMockRecorder) DeleteTracks(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTracks", reflect.TypeOf((*MockManagementClient)(nil).DeleteTracks), varargs...)
}

// GetAlbumsByAlbumArtists mocks base method.
func (m *MockManagementClient) GetAlbumsByAlbumArtists(ctx context.Context, in *platune.IdMessage, opts ...grpc.CallOption) (*platune.AlbumResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAlbumsByAlbumArtists", varargs...)
	ret0, _ := ret[0].(*platune.AlbumResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumsByAlbumArtists indicates an expected call of GetAlbumsByAlbumArtists.
func (mr *MockManagementClientMockRecorder) GetAlbumsByAlbumArtists(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumsByAlbumArtists", reflect.TypeOf((*MockManagementClient)(nil).GetAlbumsByAlbumArtists), varargs...)
}

// GetAllFolders mocks base method.
func (m *MockManagementClient) GetAllFolders(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*platune.FoldersMessage, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllFolders", varargs...)
	ret0, _ := ret[0].(*platune.FoldersMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFolders indicates an expected call of GetAllFolders.
func (mr *MockManagementClientMockRecorder) GetAllFolders(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFolders", reflect.TypeOf((*MockManagementClient)(nil).GetAllFolders), varargs...)
}

// GetDeleted mocks base method.
func (m *MockManagementClient) GetDeleted(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*platune.GetDeletedResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDeleted", varargs...)
	ret0, _ := ret[0].(*platune.GetDeletedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeleted indicates an expected call of GetDeleted.
func (mr *MockManagementClientMockRecorder) GetDeleted(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeleted", reflect.TypeOf((*MockManagementClient)(nil).GetDeleted), varargs...)
}

// GetRegisteredMount mocks base method.
func (m *MockManagementClient) GetRegisteredMount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*platune.RegisteredMountMessage, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRegisteredMount", varargs...)
	ret0, _ := ret[0].(*platune.RegisteredMountMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegisteredMount indicates an expected call of GetRegisteredMount.
func (mr *MockManagementClientMockRecorder) GetRegisteredMount(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegisteredMount", reflect.TypeOf((*MockManagementClient)(nil).GetRegisteredMount), varargs...)
}

// GetSongByPath mocks base method.
func (m *MockManagementClient) GetSongByPath(ctx context.Context, in *platune.PathMessage, opts ...grpc.CallOption) (*platune.SongResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSongByPath", varargs...)
	ret0, _ := ret[0].(*platune.SongResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSongByPath indicates an expected call of GetSongByPath.
func (mr *MockManagementClientMockRecorder) GetSongByPath(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSongByPath", reflect.TypeOf((*MockManagementClient)(nil).GetSongByPath), varargs...)
}

// Lookup mocks base method.
func (m *MockManagementClient) Lookup(ctx context.Context, in *platune.LookupRequest, opts ...grpc.CallOption) (*platune.LookupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Lookup", varargs...)
	ret0, _ := ret[0].(*platune.LookupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lookup indicates an expected call of Lookup.
func (mr *MockManagementClientMockRecorder) Lookup(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lookup", reflect.TypeOf((*MockManagementClient)(nil).Lookup), varargs...)
}

// RegisterMount mocks base method.
func (m *MockManagementClient) RegisterMount(ctx context.Context, in *platune.RegisteredMountMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterMount", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterMount indicates an expected call of RegisterMount.
func (mr *MockManagementClientMockRecorder) RegisterMount(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterMount", reflect.TypeOf((*MockManagementClient)(nil).RegisterMount), varargs...)
}

// Search mocks base method.
func (m *MockManagementClient) Search(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[platune.SearchRequest, platune.SearchResponse], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].(grpc.BidiStreamingClient[platune.SearchRequest, platune.SearchResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockManagementClientMockRecorder) Search(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockManagementClient)(nil).Search), varargs...)
}

// StartSync mocks base method.
func (m *MockManagementClient) StartSync(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartSync", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSync indicates an expected call of StartSync.
func (mr *MockManagementClientMockRecorder) StartSync(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSync", reflect.TypeOf((*MockManagementClient)(nil).StartSync), varargs...)
}

// SubscribeEvents mocks base method.
func (m *MockManagementClient) SubscribeEvents(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[platune.Progress], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubscribeEvents", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[platune.Progress])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeEvents indicates an expected call of SubscribeEvents.
func (mr *MockManagementClientMockRecorder) SubscribeEvents(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeEvents", reflect.TypeOf((*MockManagementClient)(nil).SubscribeEvents), varargs...)
}

// MockManagementServer is a mock of ManagementServer interface.
type MockManagementServer struct {
	ctrl     *gomock.Controller
	recorder *MockManagementServerMockRecorder
	isgomock struct{}
}

// MockManagementServerMockRecorder is the mock recorder for MockManagementServer.
type MockManagementServerMockRecorder struct {
	mock *MockManagementServer
}

// NewMockManagementServer creates a new mock instance.
func NewMockManagementServer(ctrl *gomock.Controller) *MockManagementServer {
	mock := &MockManagementServer{ctrl: ctrl}
	mock.recorder = &MockManagementServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagementServer) EXPECT() *MockManagementServerMockRecorder {
	return m.recorder
}

// AddFolders mocks base method.
func (m *MockManagementServer) AddFolders(arg0 context.Context, arg1 *platune.FoldersMessage) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFolders", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFolders indicates an expected call of AddFolders.
func (mr *MockManagementServerMockRecorder) AddFolders(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFolders", reflect.TypeOf((*MockManagementServer)(nil).AddFolders), arg0, arg1)
}

// DeleteTracks mocks base method.
func (m *MockManagementServer) DeleteTracks(arg0 context.Context, arg1 *platune.IdMessage) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTracks", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTracks indicates an expected call of DeleteTracks.
func (mr *MockManagementServerMockRecorder) DeleteTracks(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTracks", reflect.TypeOf((*MockManagementServer)(nil).DeleteTracks), arg0, arg1)
}

// GetAlbumsByAlbumArtists mocks base method.
func (m *MockManagementServer) GetAlbumsByAlbumArtists(arg0 context.Context, arg1 *platune.IdMessage) (*platune.AlbumResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumsByAlbumArtists", arg0, arg1)
	ret0, _ := ret[0].(*platune.AlbumResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumsByAlbumArtists indicates an expected call of GetAlbumsByAlbumArtists.
func (mr *MockManagementServerMockRecorder) GetAlbumsByAlbumArtists(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumsByAlbumArtists", reflect.TypeOf((*MockManagementServer)(nil).GetAlbumsByAlbumArtists), arg0, arg1)
}

// GetAllFolders mocks base method.
func (m *MockManagementServer) GetAllFolders(arg0 context.Context, arg1 *emptypb.Empty) (*platune.FoldersMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFolders", arg0, arg1)
	ret0, _ := ret[0].(*platune.FoldersMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFolders indicates an expected call of GetAllFolders.
func (mr *MockManagementServerMockRecorder) GetAllFolders(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFolders", reflect.TypeOf((*MockManagementServer)(nil).GetAllFolders), arg0, arg1)
}

// GetDeleted mocks base method.
func (m *MockManagementServer) GetDeleted(arg0 context.Context, arg1 *emptypb.Empty) (*platune.GetDeletedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeleted", arg0, arg1)
	ret0, _ := ret[0].(*platune.GetDeletedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeleted indicates an expected call of GetDeleted.
func (mr *MockManagementServerMockRecorder) GetDeleted(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeleted", reflect.TypeOf((*MockManagementServer)(nil).GetDeleted), arg0, arg1)
}

// GetRegisteredMount mocks base method.
func (m *MockManagementServer) GetRegisteredMount(arg0 context.Context, arg1 *emptypb.Empty) (*platune.RegisteredMountMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegisteredMount", arg0, arg1)
	ret0, _ := ret[0].(*platune.RegisteredMountMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegisteredMount indicates an expected call of GetRegisteredMount.
func (mr *MockManagementServerMockRecorder) GetRegisteredMount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegisteredMount", reflect.TypeOf((*MockManagementServer)(nil).GetRegisteredMount), arg0, arg1)
}

// GetSongByPath mocks base method.
func (m *MockManagementServer) GetSongByPath(arg0 context.Context, arg1 *platune.PathMessage) (*platune.SongResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSongByPath", arg0, arg1)
	ret0, _ := ret[0].(*platune.SongResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSongByPath indicates an expected call of GetSongByPath.
func (mr *MockManagementServerMockRecorder) GetSongByPath(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSongByPath", reflect.TypeOf((*MockManagementServer)(nil).GetSongByPath), arg0, arg1)
}

// Lookup mocks base method.
func (m *MockManagementServer) Lookup(arg0 context.Context, arg1 *platune.LookupRequest) (*platune.LookupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lookup", arg0, arg1)
	ret0, _ := ret[0].(*platune.LookupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lookup indicates an expected call of Lookup.
func (mr *MockManagementServerMockRecorder) Lookup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lookup", reflect.TypeOf((*MockManagementServer)(nil).Lookup), arg0, arg1)
}

// RegisterMount mocks base method.
func (m *MockManagementServer) RegisterMount(arg0 context.Context, arg1 *platune.RegisteredMountMessage) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterMount", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterMount indicates an expected call of RegisterMount.
func (mr *MockManagementServerMockRecorder) RegisterMount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterMount", reflect.TypeOf((*MockManagementServer)(nil).RegisterMount), arg0, arg1)
}

// Search mocks base method.
func (m *MockManagementServer) Search(arg0 grpc.BidiStreamingServer[platune.SearchRequest, platune.SearchResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Search indicates an expected call of Search.
func (mr *MockManagementServerMockRecorder) Search(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockManagementServer)(nil).Search), arg0)
}

// StartSync mocks base method.
func (m *MockManagementServer) StartSync(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSync", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSync indicates an expected call of StartSync.
func (mr *MockManagementServerMockRecorder) StartSync(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSync", reflect.TypeOf((*MockManagementServer)(nil).StartSync), arg0, arg1)
}

// SubscribeEvents mocks base method.
func (m *MockManagementServer) SubscribeEvents(arg0 *emptypb.Empty, arg1 grpc.ServerStreamingServer[platune.Progress]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeEvents", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeEvents indicates an expected call of SubscribeEvents.
func (mr *MockManagementServerMockRecorder) SubscribeEvents(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeEvents", reflect.TypeOf((*MockManagementServer)(nil).SubscribeEvents), arg0, arg1)
}

// mustEmbedUnimplementedManagementServer mocks base method.
func (m *MockManagementServer) mustEmbedUnimplementedManagementServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedManagementServer")
}

// mustEmbedUnimplementedManagementServer indicates an expected call of mustEmbedUnimplementedManagementServer.
func (mr *MockManagementServerMockRecorder) mustEmbedUnimplementedManagementServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedManagementServer", reflect.TypeOf((*MockManagementServer)(nil).mustEmbedUnimplementedManagementServer))
}

// MockUnsafeManagementServer is a mock of UnsafeManagementServer interface.
type MockUnsafeManagementServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeManagementServerMockRecorder
	isgomock struct{}
}

// MockUnsafeManagementServerMockRecorder is the mock recorder for MockUnsafeManagementServer.
type MockUnsafeManagementServerMockRecorder struct {
	mock *MockUnsafeManagementServer
}

// NewMockUnsafeManagementServer creates a new mock instance.
func NewMockUnsafeManagementServer(ctrl *gomock.Controller) *MockUnsafeManagementServer {
	mock := &MockUnsafeManagementServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeManagementServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeManagementServer) EXPECT() *MockUnsafeManagementServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedManagementServer mocks base method.
func (m *MockUnsafeManagementServer) mustEmbedUnimplementedManagementServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedManagementServer")
}

// mustEmbedUnimplementedManagementServer indicates an expected call of mustEmbedUnimplementedManagementServer.
func (mr *MockUnsafeManagementServerMockRecorder) mustEmbedUnimplementedManagementServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedManagementServer", reflect.TypeOf((*MockUnsafeManagementServer)(nil).mustEmbedUnimplementedManagementServer))
}
