// Code generated by MockGen. DO NOT EDIT.
// Source: ./../platuned/client/go/management_rpc_grpc.pb.go

// Package test is a generated GoMock package.
package test

import (
	context "context"
	reflect "reflect"

	platune "github.com/aschey/platune/client"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockManagementClient is a mock of ManagementClient interface.
type MockManagementClient struct {
	ctrl     *gomock.Controller
	recorder *MockManagementClientMockRecorder
}

// MockManagementClientMockRecorder is the mock recorder for MockManagementClient.
type MockManagementClientMockRecorder struct {
	mock *MockManagementClient
}

// NewMockManagementClient creates a new mock instance.
func NewMockManagementClient(ctrl *gomock.Controller) *MockManagementClient {
	mock := &MockManagementClient{ctrl: ctrl}
	mock.recorder = &MockManagementClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagementClient) EXPECT() *MockManagementClientMockRecorder {
	return m.recorder
}

// AddFolders mocks base method.
func (m *MockManagementClient) AddFolders(ctx context.Context, in *platune.FoldersMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddFolders", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFolders indicates an expected call of AddFolders.
func (mr *MockManagementClientMockRecorder) AddFolders(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFolders", reflect.TypeOf((*MockManagementClient)(nil).AddFolders), varargs...)
}

// DeleteTracks mocks base method.
func (m *MockManagementClient) DeleteTracks(ctx context.Context, in *platune.IdMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTracks", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTracks indicates an expected call of DeleteTracks.
func (mr *MockManagementClientMockRecorder) DeleteTracks(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTracks", reflect.TypeOf((*MockManagementClient)(nil).DeleteTracks), varargs...)
}

// GetAllFolders mocks base method.
func (m *MockManagementClient) GetAllFolders(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*platune.FoldersMessage, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllFolders", varargs...)
	ret0, _ := ret[0].(*platune.FoldersMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFolders indicates an expected call of GetAllFolders.
func (mr *MockManagementClientMockRecorder) GetAllFolders(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFolders", reflect.TypeOf((*MockManagementClient)(nil).GetAllFolders), varargs...)
}

// GetDeleted mocks base method.
func (m *MockManagementClient) GetDeleted(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*platune.GetDeletedResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDeleted", varargs...)
	ret0, _ := ret[0].(*platune.GetDeletedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeleted indicates an expected call of GetDeleted.
func (mr *MockManagementClientMockRecorder) GetDeleted(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeleted", reflect.TypeOf((*MockManagementClient)(nil).GetDeleted), varargs...)
}

// GetRegisteredMount mocks base method.
func (m *MockManagementClient) GetRegisteredMount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*platune.RegisteredMountMessage, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRegisteredMount", varargs...)
	ret0, _ := ret[0].(*platune.RegisteredMountMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegisteredMount indicates an expected call of GetRegisteredMount.
func (mr *MockManagementClientMockRecorder) GetRegisteredMount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegisteredMount", reflect.TypeOf((*MockManagementClient)(nil).GetRegisteredMount), varargs...)
}

// GetSongByPath mocks base method.
func (m *MockManagementClient) GetSongByPath(ctx context.Context, in *platune.PathMessage, opts ...grpc.CallOption) (*platune.SongResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSongByPath", varargs...)
	ret0, _ := ret[0].(*platune.SongResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSongByPath indicates an expected call of GetSongByPath.
func (mr *MockManagementClientMockRecorder) GetSongByPath(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSongByPath", reflect.TypeOf((*MockManagementClient)(nil).GetSongByPath), varargs...)
}

// Lookup mocks base method.
func (m *MockManagementClient) Lookup(ctx context.Context, in *platune.LookupRequest, opts ...grpc.CallOption) (*platune.LookupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Lookup", varargs...)
	ret0, _ := ret[0].(*platune.LookupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lookup indicates an expected call of Lookup.
func (mr *MockManagementClientMockRecorder) Lookup(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lookup", reflect.TypeOf((*MockManagementClient)(nil).Lookup), varargs...)
}

// RegisterMount mocks base method.
func (m *MockManagementClient) RegisterMount(ctx context.Context, in *platune.RegisteredMountMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterMount", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterMount indicates an expected call of RegisterMount.
func (mr *MockManagementClientMockRecorder) RegisterMount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterMount", reflect.TypeOf((*MockManagementClient)(nil).RegisterMount), varargs...)
}

// Search mocks base method.
func (m *MockManagementClient) Search(ctx context.Context, opts ...grpc.CallOption) (platune.Management_SearchClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].(platune.Management_SearchClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockManagementClientMockRecorder) Search(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockManagementClient)(nil).Search), varargs...)
}

// StartSync mocks base method.
func (m *MockManagementClient) StartSync(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartSync", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSync indicates an expected call of StartSync.
func (mr *MockManagementClientMockRecorder) StartSync(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSync", reflect.TypeOf((*MockManagementClient)(nil).StartSync), varargs...)
}

// SubscribeEvents mocks base method.
func (m *MockManagementClient) SubscribeEvents(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (platune.Management_SubscribeEventsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubscribeEvents", varargs...)
	ret0, _ := ret[0].(platune.Management_SubscribeEventsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeEvents indicates an expected call of SubscribeEvents.
func (mr *MockManagementClientMockRecorder) SubscribeEvents(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeEvents", reflect.TypeOf((*MockManagementClient)(nil).SubscribeEvents), varargs...)
}

// MockManagement_SearchClient is a mock of Management_SearchClient interface.
type MockManagement_SearchClient struct {
	ctrl     *gomock.Controller
	recorder *MockManagement_SearchClientMockRecorder
}

// MockManagement_SearchClientMockRecorder is the mock recorder for MockManagement_SearchClient.
type MockManagement_SearchClientMockRecorder struct {
	mock *MockManagement_SearchClient
}

// NewMockManagement_SearchClient creates a new mock instance.
func NewMockManagement_SearchClient(ctrl *gomock.Controller) *MockManagement_SearchClient {
	mock := &MockManagement_SearchClient{ctrl: ctrl}
	mock.recorder = &MockManagement_SearchClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagement_SearchClient) EXPECT() *MockManagement_SearchClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockManagement_SearchClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockManagement_SearchClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockManagement_SearchClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockManagement_SearchClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockManagement_SearchClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockManagement_SearchClient)(nil).Context))
}

// Header mocks base method.
func (m *MockManagement_SearchClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockManagement_SearchClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockManagement_SearchClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockManagement_SearchClient) Recv() (*platune.SearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*platune.SearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockManagement_SearchClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockManagement_SearchClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockManagement_SearchClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockManagement_SearchClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockManagement_SearchClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockManagement_SearchClient) Send(arg0 *platune.SearchRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockManagement_SearchClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockManagement_SearchClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockManagement_SearchClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockManagement_SearchClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockManagement_SearchClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockManagement_SearchClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockManagement_SearchClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockManagement_SearchClient)(nil).Trailer))
}

// MockManagement_SubscribeEventsClient is a mock of Management_SubscribeEventsClient interface.
type MockManagement_SubscribeEventsClient struct {
	ctrl     *gomock.Controller
	recorder *MockManagement_SubscribeEventsClientMockRecorder
}

// MockManagement_SubscribeEventsClientMockRecorder is the mock recorder for MockManagement_SubscribeEventsClient.
type MockManagement_SubscribeEventsClientMockRecorder struct {
	mock *MockManagement_SubscribeEventsClient
}

// NewMockManagement_SubscribeEventsClient creates a new mock instance.
func NewMockManagement_SubscribeEventsClient(ctrl *gomock.Controller) *MockManagement_SubscribeEventsClient {
	mock := &MockManagement_SubscribeEventsClient{ctrl: ctrl}
	mock.recorder = &MockManagement_SubscribeEventsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagement_SubscribeEventsClient) EXPECT() *MockManagement_SubscribeEventsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockManagement_SubscribeEventsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockManagement_SubscribeEventsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockManagement_SubscribeEventsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockManagement_SubscribeEventsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockManagement_SubscribeEventsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockManagement_SubscribeEventsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockManagement_SubscribeEventsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockManagement_SubscribeEventsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockManagement_SubscribeEventsClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockManagement_SubscribeEventsClient) Recv() (*platune.Progress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*platune.Progress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockManagement_SubscribeEventsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockManagement_SubscribeEventsClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockManagement_SubscribeEventsClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockManagement_SubscribeEventsClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockManagement_SubscribeEventsClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockManagement_SubscribeEventsClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockManagement_SubscribeEventsClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockManagement_SubscribeEventsClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockManagement_SubscribeEventsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockManagement_SubscribeEventsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockManagement_SubscribeEventsClient)(nil).Trailer))
}

// MockManagementServer is a mock of ManagementServer interface.
type MockManagementServer struct {
	ctrl     *gomock.Controller
	recorder *MockManagementServerMockRecorder
}

// MockManagementServerMockRecorder is the mock recorder for MockManagementServer.
type MockManagementServerMockRecorder struct {
	mock *MockManagementServer
}

// NewMockManagementServer creates a new mock instance.
func NewMockManagementServer(ctrl *gomock.Controller) *MockManagementServer {
	mock := &MockManagementServer{ctrl: ctrl}
	mock.recorder = &MockManagementServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagementServer) EXPECT() *MockManagementServerMockRecorder {
	return m.recorder
}

// AddFolders mocks base method.
func (m *MockManagementServer) AddFolders(arg0 context.Context, arg1 *platune.FoldersMessage) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFolders", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFolders indicates an expected call of AddFolders.
func (mr *MockManagementServerMockRecorder) AddFolders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFolders", reflect.TypeOf((*MockManagementServer)(nil).AddFolders), arg0, arg1)
}

// DeleteTracks mocks base method.
func (m *MockManagementServer) DeleteTracks(arg0 context.Context, arg1 *platune.IdMessage) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTracks", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTracks indicates an expected call of DeleteTracks.
func (mr *MockManagementServerMockRecorder) DeleteTracks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTracks", reflect.TypeOf((*MockManagementServer)(nil).DeleteTracks), arg0, arg1)
}

// GetAllFolders mocks base method.
func (m *MockManagementServer) GetAllFolders(arg0 context.Context, arg1 *emptypb.Empty) (*platune.FoldersMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFolders", arg0, arg1)
	ret0, _ := ret[0].(*platune.FoldersMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFolders indicates an expected call of GetAllFolders.
func (mr *MockManagementServerMockRecorder) GetAllFolders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFolders", reflect.TypeOf((*MockManagementServer)(nil).GetAllFolders), arg0, arg1)
}

// GetDeleted mocks base method.
func (m *MockManagementServer) GetDeleted(arg0 context.Context, arg1 *emptypb.Empty) (*platune.GetDeletedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeleted", arg0, arg1)
	ret0, _ := ret[0].(*platune.GetDeletedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeleted indicates an expected call of GetDeleted.
func (mr *MockManagementServerMockRecorder) GetDeleted(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeleted", reflect.TypeOf((*MockManagementServer)(nil).GetDeleted), arg0, arg1)
}

// GetRegisteredMount mocks base method.
func (m *MockManagementServer) GetRegisteredMount(arg0 context.Context, arg1 *emptypb.Empty) (*platune.RegisteredMountMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegisteredMount", arg0, arg1)
	ret0, _ := ret[0].(*platune.RegisteredMountMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegisteredMount indicates an expected call of GetRegisteredMount.
func (mr *MockManagementServerMockRecorder) GetRegisteredMount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegisteredMount", reflect.TypeOf((*MockManagementServer)(nil).GetRegisteredMount), arg0, arg1)
}

// GetSongByPath mocks base method.
func (m *MockManagementServer) GetSongByPath(arg0 context.Context, arg1 *platune.PathMessage) (*platune.SongResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSongByPath", arg0, arg1)
	ret0, _ := ret[0].(*platune.SongResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSongByPath indicates an expected call of GetSongByPath.
func (mr *MockManagementServerMockRecorder) GetSongByPath(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSongByPath", reflect.TypeOf((*MockManagementServer)(nil).GetSongByPath), arg0, arg1)
}

// Lookup mocks base method.
func (m *MockManagementServer) Lookup(arg0 context.Context, arg1 *platune.LookupRequest) (*platune.LookupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lookup", arg0, arg1)
	ret0, _ := ret[0].(*platune.LookupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lookup indicates an expected call of Lookup.
func (mr *MockManagementServerMockRecorder) Lookup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lookup", reflect.TypeOf((*MockManagementServer)(nil).Lookup), arg0, arg1)
}

// RegisterMount mocks base method.
func (m *MockManagementServer) RegisterMount(arg0 context.Context, arg1 *platune.RegisteredMountMessage) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterMount", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterMount indicates an expected call of RegisterMount.
func (mr *MockManagementServerMockRecorder) RegisterMount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterMount", reflect.TypeOf((*MockManagementServer)(nil).RegisterMount), arg0, arg1)
}

// Search mocks base method.
func (m *MockManagementServer) Search(arg0 platune.Management_SearchServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Search indicates an expected call of Search.
func (mr *MockManagementServerMockRecorder) Search(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockManagementServer)(nil).Search), arg0)
}

// StartSync mocks base method.
func (m *MockManagementServer) StartSync(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSync", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSync indicates an expected call of StartSync.
func (mr *MockManagementServerMockRecorder) StartSync(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSync", reflect.TypeOf((*MockManagementServer)(nil).StartSync), arg0, arg1)
}

// SubscribeEvents mocks base method.
func (m *MockManagementServer) SubscribeEvents(arg0 *emptypb.Empty, arg1 platune.Management_SubscribeEventsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeEvents", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeEvents indicates an expected call of SubscribeEvents.
func (mr *MockManagementServerMockRecorder) SubscribeEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeEvents", reflect.TypeOf((*MockManagementServer)(nil).SubscribeEvents), arg0, arg1)
}

// mustEmbedUnimplementedManagementServer mocks base method.
func (m *MockManagementServer) mustEmbedUnimplementedManagementServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedManagementServer")
}

// mustEmbedUnimplementedManagementServer indicates an expected call of mustEmbedUnimplementedManagementServer.
func (mr *MockManagementServerMockRecorder) mustEmbedUnimplementedManagementServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedManagementServer", reflect.TypeOf((*MockManagementServer)(nil).mustEmbedUnimplementedManagementServer))
}

// MockUnsafeManagementServer is a mock of UnsafeManagementServer interface.
type MockUnsafeManagementServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeManagementServerMockRecorder
}

// MockUnsafeManagementServerMockRecorder is the mock recorder for MockUnsafeManagementServer.
type MockUnsafeManagementServerMockRecorder struct {
	mock *MockUnsafeManagementServer
}

// NewMockUnsafeManagementServer creates a new mock instance.
func NewMockUnsafeManagementServer(ctrl *gomock.Controller) *MockUnsafeManagementServer {
	mock := &MockUnsafeManagementServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeManagementServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeManagementServer) EXPECT() *MockUnsafeManagementServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedManagementServer mocks base method.
func (m *MockUnsafeManagementServer) mustEmbedUnimplementedManagementServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedManagementServer")
}

// mustEmbedUnimplementedManagementServer indicates an expected call of mustEmbedUnimplementedManagementServer.
func (mr *MockUnsafeManagementServerMockRecorder) mustEmbedUnimplementedManagementServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedManagementServer", reflect.TypeOf((*MockUnsafeManagementServer)(nil).mustEmbedUnimplementedManagementServer))
}

// MockManagement_SearchServer is a mock of Management_SearchServer interface.
type MockManagement_SearchServer struct {
	ctrl     *gomock.Controller
	recorder *MockManagement_SearchServerMockRecorder
}

// MockManagement_SearchServerMockRecorder is the mock recorder for MockManagement_SearchServer.
type MockManagement_SearchServerMockRecorder struct {
	mock *MockManagement_SearchServer
}

// NewMockManagement_SearchServer creates a new mock instance.
func NewMockManagement_SearchServer(ctrl *gomock.Controller) *MockManagement_SearchServer {
	mock := &MockManagement_SearchServer{ctrl: ctrl}
	mock.recorder = &MockManagement_SearchServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagement_SearchServer) EXPECT() *MockManagement_SearchServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockManagement_SearchServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockManagement_SearchServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockManagement_SearchServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockManagement_SearchServer) Recv() (*platune.SearchRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*platune.SearchRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockManagement_SearchServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockManagement_SearchServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockManagement_SearchServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockManagement_SearchServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockManagement_SearchServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockManagement_SearchServer) Send(arg0 *platune.SearchResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockManagement_SearchServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockManagement_SearchServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockManagement_SearchServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockManagement_SearchServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockManagement_SearchServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockManagement_SearchServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockManagement_SearchServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockManagement_SearchServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockManagement_SearchServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockManagement_SearchServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockManagement_SearchServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockManagement_SearchServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockManagement_SearchServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockManagement_SearchServer)(nil).SetTrailer), arg0)
}

// MockManagement_SubscribeEventsServer is a mock of Management_SubscribeEventsServer interface.
type MockManagement_SubscribeEventsServer struct {
	ctrl     *gomock.Controller
	recorder *MockManagement_SubscribeEventsServerMockRecorder
}

// MockManagement_SubscribeEventsServerMockRecorder is the mock recorder for MockManagement_SubscribeEventsServer.
type MockManagement_SubscribeEventsServerMockRecorder struct {
	mock *MockManagement_SubscribeEventsServer
}

// NewMockManagement_SubscribeEventsServer creates a new mock instance.
func NewMockManagement_SubscribeEventsServer(ctrl *gomock.Controller) *MockManagement_SubscribeEventsServer {
	mock := &MockManagement_SubscribeEventsServer{ctrl: ctrl}
	mock.recorder = &MockManagement_SubscribeEventsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagement_SubscribeEventsServer) EXPECT() *MockManagement_SubscribeEventsServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockManagement_SubscribeEventsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockManagement_SubscribeEventsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockManagement_SubscribeEventsServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockManagement_SubscribeEventsServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockManagement_SubscribeEventsServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockManagement_SubscribeEventsServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockManagement_SubscribeEventsServer) Send(arg0 *platune.Progress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockManagement_SubscribeEventsServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockManagement_SubscribeEventsServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockManagement_SubscribeEventsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockManagement_SubscribeEventsServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockManagement_SubscribeEventsServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockManagement_SubscribeEventsServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockManagement_SubscribeEventsServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockManagement_SubscribeEventsServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockManagement_SubscribeEventsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockManagement_SubscribeEventsServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockManagement_SubscribeEventsServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockManagement_SubscribeEventsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockManagement_SubscribeEventsServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockManagement_SubscribeEventsServer)(nil).SetTrailer), arg0)
}
