// Code generated by MockGen. DO NOT EDIT.
// Source: ./../platuned/client/go/player_rpc_grpc.pb.go

// Package test is a generated GoMock package.
package test

import (
	context "context"
	reflect "reflect"

	platune "github.com/aschey/platune/client"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockPlayerClient is a mock of PlayerClient interface.
type MockPlayerClient struct {
	ctrl     *gomock.Controller
	recorder *MockPlayerClientMockRecorder
}

// MockPlayerClientMockRecorder is the mock recorder for MockPlayerClient.
type MockPlayerClientMockRecorder struct {
	mock *MockPlayerClient
}

// NewMockPlayerClient creates a new mock instance.
func NewMockPlayerClient(ctrl *gomock.Controller) *MockPlayerClient {
	mock := &MockPlayerClient{ctrl: ctrl}
	mock.recorder = &MockPlayerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlayerClient) EXPECT() *MockPlayerClientMockRecorder {
	return m.recorder
}

// AddToQueue mocks base method.
func (m *MockPlayerClient) AddToQueue(ctx context.Context, in *platune.AddToQueueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddToQueue", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddToQueue indicates an expected call of AddToQueue.
func (mr *MockPlayerClientMockRecorder) AddToQueue(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToQueue", reflect.TypeOf((*MockPlayerClient)(nil).AddToQueue), varargs...)
}

// GetCurrentStatus mocks base method.
func (m *MockPlayerClient) GetCurrentStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*platune.StatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCurrentStatus", varargs...)
	ret0, _ := ret[0].(*platune.StatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentStatus indicates an expected call of GetCurrentStatus.
func (mr *MockPlayerClientMockRecorder) GetCurrentStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentStatus", reflect.TypeOf((*MockPlayerClient)(nil).GetCurrentStatus), varargs...)
}

// ListOutputDevices mocks base method.
func (m *MockPlayerClient) ListOutputDevices(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*platune.DevicesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOutputDevices", varargs...)
	ret0, _ := ret[0].(*platune.DevicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOutputDevices indicates an expected call of ListOutputDevices.
func (mr *MockPlayerClientMockRecorder) ListOutputDevices(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOutputDevices", reflect.TypeOf((*MockPlayerClient)(nil).ListOutputDevices), varargs...)
}

// Next mocks base method.
func (m *MockPlayerClient) Next(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Next", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockPlayerClientMockRecorder) Next(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockPlayerClient)(nil).Next), varargs...)
}

// Pause mocks base method.
func (m *MockPlayerClient) Pause(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Pause", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pause indicates an expected call of Pause.
func (mr *MockPlayerClientMockRecorder) Pause(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pause", reflect.TypeOf((*MockPlayerClient)(nil).Pause), varargs...)
}

// Previous mocks base method.
func (m *MockPlayerClient) Previous(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Previous", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Previous indicates an expected call of Previous.
func (mr *MockPlayerClientMockRecorder) Previous(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Previous", reflect.TypeOf((*MockPlayerClient)(nil).Previous), varargs...)
}

// Resume mocks base method.
func (m *MockPlayerClient) Resume(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Resume", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resume indicates an expected call of Resume.
func (mr *MockPlayerClientMockRecorder) Resume(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resume", reflect.TypeOf((*MockPlayerClient)(nil).Resume), varargs...)
}

// Seek mocks base method.
func (m *MockPlayerClient) Seek(ctx context.Context, in *platune.SeekRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Seek", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek.
func (mr *MockPlayerClientMockRecorder) Seek(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockPlayerClient)(nil).Seek), varargs...)
}

// SetQueue mocks base method.
func (m *MockPlayerClient) SetQueue(ctx context.Context, in *platune.QueueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetQueue", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetQueue indicates an expected call of SetQueue.
func (mr *MockPlayerClientMockRecorder) SetQueue(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetQueue", reflect.TypeOf((*MockPlayerClient)(nil).SetQueue), varargs...)
}

// SetVolume mocks base method.
func (m *MockPlayerClient) SetVolume(ctx context.Context, in *platune.SetVolumeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetVolume", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetVolume indicates an expected call of SetVolume.
func (mr *MockPlayerClientMockRecorder) SetVolume(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVolume", reflect.TypeOf((*MockPlayerClient)(nil).SetVolume), varargs...)
}

// Stop mocks base method.
func (m *MockPlayerClient) Stop(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Stop", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop.
func (mr *MockPlayerClientMockRecorder) Stop(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockPlayerClient)(nil).Stop), varargs...)
}

// SubscribeEvents mocks base method.
func (m *MockPlayerClient) SubscribeEvents(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (platune.Player_SubscribeEventsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubscribeEvents", varargs...)
	ret0, _ := ret[0].(platune.Player_SubscribeEventsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeEvents indicates an expected call of SubscribeEvents.
func (mr *MockPlayerClientMockRecorder) SubscribeEvents(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeEvents", reflect.TypeOf((*MockPlayerClient)(nil).SubscribeEvents), varargs...)
}

// MockPlayer_SubscribeEventsClient is a mock of Player_SubscribeEventsClient interface.
type MockPlayer_SubscribeEventsClient struct {
	ctrl     *gomock.Controller
	recorder *MockPlayer_SubscribeEventsClientMockRecorder
}

// MockPlayer_SubscribeEventsClientMockRecorder is the mock recorder for MockPlayer_SubscribeEventsClient.
type MockPlayer_SubscribeEventsClientMockRecorder struct {
	mock *MockPlayer_SubscribeEventsClient
}

// NewMockPlayer_SubscribeEventsClient creates a new mock instance.
func NewMockPlayer_SubscribeEventsClient(ctrl *gomock.Controller) *MockPlayer_SubscribeEventsClient {
	mock := &MockPlayer_SubscribeEventsClient{ctrl: ctrl}
	mock.recorder = &MockPlayer_SubscribeEventsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlayer_SubscribeEventsClient) EXPECT() *MockPlayer_SubscribeEventsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockPlayer_SubscribeEventsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockPlayer_SubscribeEventsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockPlayer_SubscribeEventsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockPlayer_SubscribeEventsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPlayer_SubscribeEventsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPlayer_SubscribeEventsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockPlayer_SubscribeEventsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockPlayer_SubscribeEventsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockPlayer_SubscribeEventsClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockPlayer_SubscribeEventsClient) Recv() (*platune.EventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*platune.EventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockPlayer_SubscribeEventsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockPlayer_SubscribeEventsClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockPlayer_SubscribeEventsClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPlayer_SubscribeEventsClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPlayer_SubscribeEventsClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockPlayer_SubscribeEventsClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPlayer_SubscribeEventsClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPlayer_SubscribeEventsClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockPlayer_SubscribeEventsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockPlayer_SubscribeEventsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockPlayer_SubscribeEventsClient)(nil).Trailer))
}

// MockPlayerServer is a mock of PlayerServer interface.
type MockPlayerServer struct {
	ctrl     *gomock.Controller
	recorder *MockPlayerServerMockRecorder
}

// MockPlayerServerMockRecorder is the mock recorder for MockPlayerServer.
type MockPlayerServerMockRecorder struct {
	mock *MockPlayerServer
}

// NewMockPlayerServer creates a new mock instance.
func NewMockPlayerServer(ctrl *gomock.Controller) *MockPlayerServer {
	mock := &MockPlayerServer{ctrl: ctrl}
	mock.recorder = &MockPlayerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlayerServer) EXPECT() *MockPlayerServerMockRecorder {
	return m.recorder
}

// AddToQueue mocks base method.
func (m *MockPlayerServer) AddToQueue(arg0 context.Context, arg1 *platune.AddToQueueRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToQueue", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddToQueue indicates an expected call of AddToQueue.
func (mr *MockPlayerServerMockRecorder) AddToQueue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToQueue", reflect.TypeOf((*MockPlayerServer)(nil).AddToQueue), arg0, arg1)
}

// GetCurrentStatus mocks base method.
func (m *MockPlayerServer) GetCurrentStatus(arg0 context.Context, arg1 *emptypb.Empty) (*platune.StatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentStatus", arg0, arg1)
	ret0, _ := ret[0].(*platune.StatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentStatus indicates an expected call of GetCurrentStatus.
func (mr *MockPlayerServerMockRecorder) GetCurrentStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentStatus", reflect.TypeOf((*MockPlayerServer)(nil).GetCurrentStatus), arg0, arg1)
}

// ListOutputDevices mocks base method.
func (m *MockPlayerServer) ListOutputDevices(arg0 context.Context, arg1 *emptypb.Empty) (*platune.DevicesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOutputDevices", arg0, arg1)
	ret0, _ := ret[0].(*platune.DevicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOutputDevices indicates an expected call of ListOutputDevices.
func (mr *MockPlayerServerMockRecorder) ListOutputDevices(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOutputDevices", reflect.TypeOf((*MockPlayerServer)(nil).ListOutputDevices), arg0, arg1)
}

// Next mocks base method.
func (m *MockPlayerServer) Next(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockPlayerServerMockRecorder) Next(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockPlayerServer)(nil).Next), arg0, arg1)
}

// Pause mocks base method.
func (m *MockPlayerServer) Pause(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pause", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pause indicates an expected call of Pause.
func (mr *MockPlayerServerMockRecorder) Pause(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pause", reflect.TypeOf((*MockPlayerServer)(nil).Pause), arg0, arg1)
}

// Previous mocks base method.
func (m *MockPlayerServer) Previous(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Previous", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Previous indicates an expected call of Previous.
func (mr *MockPlayerServerMockRecorder) Previous(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Previous", reflect.TypeOf((*MockPlayerServer)(nil).Previous), arg0, arg1)
}

// Resume mocks base method.
func (m *MockPlayerServer) Resume(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resume", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resume indicates an expected call of Resume.
func (mr *MockPlayerServerMockRecorder) Resume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resume", reflect.TypeOf((*MockPlayerServer)(nil).Resume), arg0, arg1)
}

// Seek mocks base method.
func (m *MockPlayerServer) Seek(arg0 context.Context, arg1 *platune.SeekRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seek", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek.
func (mr *MockPlayerServerMockRecorder) Seek(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockPlayerServer)(nil).Seek), arg0, arg1)
}

// SetQueue mocks base method.
func (m *MockPlayerServer) SetQueue(arg0 context.Context, arg1 *platune.QueueRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetQueue", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetQueue indicates an expected call of SetQueue.
func (mr *MockPlayerServerMockRecorder) SetQueue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetQueue", reflect.TypeOf((*MockPlayerServer)(nil).SetQueue), arg0, arg1)
}

// SetVolume mocks base method.
func (m *MockPlayerServer) SetVolume(arg0 context.Context, arg1 *platune.SetVolumeRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVolume", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetVolume indicates an expected call of SetVolume.
func (mr *MockPlayerServerMockRecorder) SetVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVolume", reflect.TypeOf((*MockPlayerServer)(nil).SetVolume), arg0, arg1)
}

// Stop mocks base method.
func (m *MockPlayerServer) Stop(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop.
func (mr *MockPlayerServerMockRecorder) Stop(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockPlayerServer)(nil).Stop), arg0, arg1)
}

// SubscribeEvents mocks base method.
func (m *MockPlayerServer) SubscribeEvents(arg0 *emptypb.Empty, arg1 platune.Player_SubscribeEventsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeEvents", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeEvents indicates an expected call of SubscribeEvents.
func (mr *MockPlayerServerMockRecorder) SubscribeEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeEvents", reflect.TypeOf((*MockPlayerServer)(nil).SubscribeEvents), arg0, arg1)
}

// mustEmbedUnimplementedPlayerServer mocks base method.
func (m *MockPlayerServer) mustEmbedUnimplementedPlayerServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPlayerServer")
}

// mustEmbedUnimplementedPlayerServer indicates an expected call of mustEmbedUnimplementedPlayerServer.
func (mr *MockPlayerServerMockRecorder) mustEmbedUnimplementedPlayerServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPlayerServer", reflect.TypeOf((*MockPlayerServer)(nil).mustEmbedUnimplementedPlayerServer))
}

// MockUnsafePlayerServer is a mock of UnsafePlayerServer interface.
type MockUnsafePlayerServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafePlayerServerMockRecorder
}

// MockUnsafePlayerServerMockRecorder is the mock recorder for MockUnsafePlayerServer.
type MockUnsafePlayerServerMockRecorder struct {
	mock *MockUnsafePlayerServer
}

// NewMockUnsafePlayerServer creates a new mock instance.
func NewMockUnsafePlayerServer(ctrl *gomock.Controller) *MockUnsafePlayerServer {
	mock := &MockUnsafePlayerServer{ctrl: ctrl}
	mock.recorder = &MockUnsafePlayerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafePlayerServer) EXPECT() *MockUnsafePlayerServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedPlayerServer mocks base method.
func (m *MockUnsafePlayerServer) mustEmbedUnimplementedPlayerServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPlayerServer")
}

// mustEmbedUnimplementedPlayerServer indicates an expected call of mustEmbedUnimplementedPlayerServer.
func (mr *MockUnsafePlayerServerMockRecorder) mustEmbedUnimplementedPlayerServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPlayerServer", reflect.TypeOf((*MockUnsafePlayerServer)(nil).mustEmbedUnimplementedPlayerServer))
}

// MockPlayer_SubscribeEventsServer is a mock of Player_SubscribeEventsServer interface.
type MockPlayer_SubscribeEventsServer struct {
	ctrl     *gomock.Controller
	recorder *MockPlayer_SubscribeEventsServerMockRecorder
}

// MockPlayer_SubscribeEventsServerMockRecorder is the mock recorder for MockPlayer_SubscribeEventsServer.
type MockPlayer_SubscribeEventsServerMockRecorder struct {
	mock *MockPlayer_SubscribeEventsServer
}

// NewMockPlayer_SubscribeEventsServer creates a new mock instance.
func NewMockPlayer_SubscribeEventsServer(ctrl *gomock.Controller) *MockPlayer_SubscribeEventsServer {
	mock := &MockPlayer_SubscribeEventsServer{ctrl: ctrl}
	mock.recorder = &MockPlayer_SubscribeEventsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlayer_SubscribeEventsServer) EXPECT() *MockPlayer_SubscribeEventsServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockPlayer_SubscribeEventsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPlayer_SubscribeEventsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPlayer_SubscribeEventsServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockPlayer_SubscribeEventsServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPlayer_SubscribeEventsServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPlayer_SubscribeEventsServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockPlayer_SubscribeEventsServer) Send(arg0 *platune.EventResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockPlayer_SubscribeEventsServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPlayer_SubscribeEventsServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockPlayer_SubscribeEventsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockPlayer_SubscribeEventsServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockPlayer_SubscribeEventsServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockPlayer_SubscribeEventsServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPlayer_SubscribeEventsServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPlayer_SubscribeEventsServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockPlayer_SubscribeEventsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockPlayer_SubscribeEventsServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockPlayer_SubscribeEventsServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockPlayer_SubscribeEventsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockPlayer_SubscribeEventsServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockPlayer_SubscribeEventsServer)(nil).SetTrailer), arg0)
}
