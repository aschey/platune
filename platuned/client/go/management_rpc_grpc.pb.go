// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package platune

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagementClient is the client API for Management service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagementClient interface {
	Sync(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Management_SyncClient, error)
	AddFolders(ctx context.Context, in *FoldersMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAllFolders(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FoldersMessage, error)
	RegisterMount(ctx context.Context, in *RegisteredMountMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRegisteredMount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RegisteredMountMessage, error)
	Search(ctx context.Context, opts ...grpc.CallOption) (Management_SearchClient, error)
	Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error)
	GetDeleted(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDeletedResponse, error)
	DeleteTracks(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type managementClient struct {
	cc grpc.ClientConnInterface
}

func NewManagementClient(cc grpc.ClientConnInterface) ManagementClient {
	return &managementClient{cc}
}

func (c *managementClient) Sync(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Management_SyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &Management_ServiceDesc.Streams[0], "/management_rpc.Management/Sync", opts...)
	if err != nil {
		return nil, err
	}
	x := &managementSyncClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Management_SyncClient interface {
	Recv() (*Progress, error)
	grpc.ClientStream
}

type managementSyncClient struct {
	grpc.ClientStream
}

func (x *managementSyncClient) Recv() (*Progress, error) {
	m := new(Progress)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *managementClient) AddFolders(ctx context.Context, in *FoldersMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/management_rpc.Management/AddFolders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetAllFolders(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FoldersMessage, error) {
	out := new(FoldersMessage)
	err := c.cc.Invoke(ctx, "/management_rpc.Management/GetAllFolders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) RegisterMount(ctx context.Context, in *RegisteredMountMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/management_rpc.Management/RegisterMount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetRegisteredMount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RegisteredMountMessage, error) {
	out := new(RegisteredMountMessage)
	err := c.cc.Invoke(ctx, "/management_rpc.Management/GetRegisteredMount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) Search(ctx context.Context, opts ...grpc.CallOption) (Management_SearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &Management_ServiceDesc.Streams[1], "/management_rpc.Management/Search", opts...)
	if err != nil {
		return nil, err
	}
	x := &managementSearchClient{stream}
	return x, nil
}

type Management_SearchClient interface {
	Send(*SearchRequest) error
	Recv() (*SearchResponse, error)
	grpc.ClientStream
}

type managementSearchClient struct {
	grpc.ClientStream
}

func (x *managementSearchClient) Send(m *SearchRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *managementSearchClient) Recv() (*SearchResponse, error) {
	m := new(SearchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *managementClient) Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error) {
	out := new(LookupResponse)
	err := c.cc.Invoke(ctx, "/management_rpc.Management/Lookup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetDeleted(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDeletedResponse, error) {
	out := new(GetDeletedResponse)
	err := c.cc.Invoke(ctx, "/management_rpc.Management/GetDeleted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) DeleteTracks(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/management_rpc.Management/DeleteTracks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagementServer is the server API for Management service.
// All implementations must embed UnimplementedManagementServer
// for forward compatibility
type ManagementServer interface {
	Sync(*emptypb.Empty, Management_SyncServer) error
	AddFolders(context.Context, *FoldersMessage) (*emptypb.Empty, error)
	GetAllFolders(context.Context, *emptypb.Empty) (*FoldersMessage, error)
	RegisterMount(context.Context, *RegisteredMountMessage) (*emptypb.Empty, error)
	GetRegisteredMount(context.Context, *emptypb.Empty) (*RegisteredMountMessage, error)
	Search(Management_SearchServer) error
	Lookup(context.Context, *LookupRequest) (*LookupResponse, error)
	GetDeleted(context.Context, *emptypb.Empty) (*GetDeletedResponse, error)
	DeleteTracks(context.Context, *IdMessage) (*emptypb.Empty, error)
	mustEmbedUnimplementedManagementServer()
}

// UnimplementedManagementServer must be embedded to have forward compatible implementations.
type UnimplementedManagementServer struct {
}

func (UnimplementedManagementServer) Sync(*emptypb.Empty, Management_SyncServer) error {
	return status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedManagementServer) AddFolders(context.Context, *FoldersMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFolders not implemented")
}
func (UnimplementedManagementServer) GetAllFolders(context.Context, *emptypb.Empty) (*FoldersMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllFolders not implemented")
}
func (UnimplementedManagementServer) RegisterMount(context.Context, *RegisteredMountMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterMount not implemented")
}
func (UnimplementedManagementServer) GetRegisteredMount(context.Context, *emptypb.Empty) (*RegisteredMountMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegisteredMount not implemented")
}
func (UnimplementedManagementServer) Search(Management_SearchServer) error {
	return status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedManagementServer) Lookup(context.Context, *LookupRequest) (*LookupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lookup not implemented")
}
func (UnimplementedManagementServer) GetDeleted(context.Context, *emptypb.Empty) (*GetDeletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeleted not implemented")
}
func (UnimplementedManagementServer) DeleteTracks(context.Context, *IdMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTracks not implemented")
}
func (UnimplementedManagementServer) mustEmbedUnimplementedManagementServer() {}

// UnsafeManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagementServer will
// result in compilation errors.
type UnsafeManagementServer interface {
	mustEmbedUnimplementedManagementServer()
}

func RegisterManagementServer(s grpc.ServiceRegistrar, srv ManagementServer) {
	s.RegisterService(&Management_ServiceDesc, srv)
}

func _Management_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagementServer).Sync(m, &managementSyncServer{stream})
}

type Management_SyncServer interface {
	Send(*Progress) error
	grpc.ServerStream
}

type managementSyncServer struct {
	grpc.ServerStream
}

func (x *managementSyncServer) Send(m *Progress) error {
	return x.ServerStream.SendMsg(m)
}

func _Management_AddFolders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FoldersMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).AddFolders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management_rpc.Management/AddFolders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).AddFolders(ctx, req.(*FoldersMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetAllFolders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetAllFolders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management_rpc.Management/GetAllFolders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetAllFolders(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_RegisterMount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisteredMountMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).RegisterMount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management_rpc.Management/RegisterMount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).RegisterMount(ctx, req.(*RegisteredMountMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetRegisteredMount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetRegisteredMount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management_rpc.Management/GetRegisteredMount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetRegisteredMount(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ManagementServer).Search(&managementSearchServer{stream})
}

type Management_SearchServer interface {
	Send(*SearchResponse) error
	Recv() (*SearchRequest, error)
	grpc.ServerStream
}

type managementSearchServer struct {
	grpc.ServerStream
}

func (x *managementSearchServer) Send(m *SearchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *managementSearchServer) Recv() (*SearchRequest, error) {
	m := new(SearchRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Management_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management_rpc.Management/Lookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).Lookup(ctx, req.(*LookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetDeleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetDeleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management_rpc.Management/GetDeleted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetDeleted(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_DeleteTracks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).DeleteTracks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management_rpc.Management/DeleteTracks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).DeleteTracks(ctx, req.(*IdMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Management_ServiceDesc is the grpc.ServiceDesc for Management service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Management_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "management_rpc.Management",
	HandlerType: (*ManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFolders",
			Handler:    _Management_AddFolders_Handler,
		},
		{
			MethodName: "GetAllFolders",
			Handler:    _Management_GetAllFolders_Handler,
		},
		{
			MethodName: "RegisterMount",
			Handler:    _Management_RegisterMount_Handler,
		},
		{
			MethodName: "GetRegisteredMount",
			Handler:    _Management_GetRegisteredMount_Handler,
		},
		{
			MethodName: "Lookup",
			Handler:    _Management_Lookup_Handler,
		},
		{
			MethodName: "GetDeleted",
			Handler:    _Management_GetDeleted_Handler,
		},
		{
			MethodName: "DeleteTracks",
			Handler:    _Management_DeleteTracks_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sync",
			Handler:       _Management_Sync_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Search",
			Handler:       _Management_Search_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "management_rpc.proto",
}
