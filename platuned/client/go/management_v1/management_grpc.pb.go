// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.1
// source: management.proto

package management_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Management_StartSync_FullMethodName               = "/platune.management.v1.Management/StartSync"
	Management_AddFolders_FullMethodName              = "/platune.management.v1.Management/AddFolders"
	Management_GetAllFolders_FullMethodName           = "/platune.management.v1.Management/GetAllFolders"
	Management_RegisterMount_FullMethodName           = "/platune.management.v1.Management/RegisterMount"
	Management_GetRegisteredMount_FullMethodName      = "/platune.management.v1.Management/GetRegisteredMount"
	Management_Search_FullMethodName                  = "/platune.management.v1.Management/Search"
	Management_Lookup_FullMethodName                  = "/platune.management.v1.Management/Lookup"
	Management_GetSongByPath_FullMethodName           = "/platune.management.v1.Management/GetSongByPath"
	Management_GetAlbumsByAlbumArtists_FullMethodName = "/platune.management.v1.Management/GetAlbumsByAlbumArtists"
	Management_GetDeleted_FullMethodName              = "/platune.management.v1.Management/GetDeleted"
	Management_DeleteTracks_FullMethodName            = "/platune.management.v1.Management/DeleteTracks"
	Management_SubscribeEvents_FullMethodName         = "/platune.management.v1.Management/SubscribeEvents"
)

// ManagementClient is the client API for Management service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagementClient interface {
	StartSync(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddFolders(ctx context.Context, in *FoldersMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAllFolders(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FoldersMessage, error)
	RegisterMount(ctx context.Context, in *RegisteredMountMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRegisteredMount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RegisteredMountMessage, error)
	Search(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SearchRequest, SearchResponse], error)
	Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error)
	GetSongByPath(ctx context.Context, in *PathMessage, opts ...grpc.CallOption) (*SongResponse, error)
	GetAlbumsByAlbumArtists(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*AlbumResponse, error)
	GetDeleted(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDeletedResponse, error)
	DeleteTracks(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SubscribeEvents(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Progress], error)
}

type managementClient struct {
	cc grpc.ClientConnInterface
}

func NewManagementClient(cc grpc.ClientConnInterface) ManagementClient {
	return &managementClient{cc}
}

func (c *managementClient) StartSync(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Management_StartSync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) AddFolders(ctx context.Context, in *FoldersMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Management_AddFolders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetAllFolders(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FoldersMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FoldersMessage)
	err := c.cc.Invoke(ctx, Management_GetAllFolders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) RegisterMount(ctx context.Context, in *RegisteredMountMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Management_RegisterMount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetRegisteredMount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RegisteredMountMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisteredMountMessage)
	err := c.cc.Invoke(ctx, Management_GetRegisteredMount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) Search(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SearchRequest, SearchResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Management_ServiceDesc.Streams[0], Management_Search_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SearchRequest, SearchResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Management_SearchClient = grpc.BidiStreamingClient[SearchRequest, SearchResponse]

func (c *managementClient) Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LookupResponse)
	err := c.cc.Invoke(ctx, Management_Lookup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetSongByPath(ctx context.Context, in *PathMessage, opts ...grpc.CallOption) (*SongResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SongResponse)
	err := c.cc.Invoke(ctx, Management_GetSongByPath_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetAlbumsByAlbumArtists(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*AlbumResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AlbumResponse)
	err := c.cc.Invoke(ctx, Management_GetAlbumsByAlbumArtists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetDeleted(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDeletedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeletedResponse)
	err := c.cc.Invoke(ctx, Management_GetDeleted_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) DeleteTracks(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Management_DeleteTracks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) SubscribeEvents(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Progress], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Management_ServiceDesc.Streams[1], Management_SubscribeEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, Progress]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Management_SubscribeEventsClient = grpc.ServerStreamingClient[Progress]

// ManagementServer is the server API for Management service.
// All implementations must embed UnimplementedManagementServer
// for forward compatibility.
type ManagementServer interface {
	StartSync(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	AddFolders(context.Context, *FoldersMessage) (*emptypb.Empty, error)
	GetAllFolders(context.Context, *emptypb.Empty) (*FoldersMessage, error)
	RegisterMount(context.Context, *RegisteredMountMessage) (*emptypb.Empty, error)
	GetRegisteredMount(context.Context, *emptypb.Empty) (*RegisteredMountMessage, error)
	Search(grpc.BidiStreamingServer[SearchRequest, SearchResponse]) error
	Lookup(context.Context, *LookupRequest) (*LookupResponse, error)
	GetSongByPath(context.Context, *PathMessage) (*SongResponse, error)
	GetAlbumsByAlbumArtists(context.Context, *IdMessage) (*AlbumResponse, error)
	GetDeleted(context.Context, *emptypb.Empty) (*GetDeletedResponse, error)
	DeleteTracks(context.Context, *IdMessage) (*emptypb.Empty, error)
	SubscribeEvents(*emptypb.Empty, grpc.ServerStreamingServer[Progress]) error
	mustEmbedUnimplementedManagementServer()
}

// UnimplementedManagementServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedManagementServer struct{}

func (UnimplementedManagementServer) StartSync(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSync not implemented")
}
func (UnimplementedManagementServer) AddFolders(context.Context, *FoldersMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFolders not implemented")
}
func (UnimplementedManagementServer) GetAllFolders(context.Context, *emptypb.Empty) (*FoldersMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllFolders not implemented")
}
func (UnimplementedManagementServer) RegisterMount(context.Context, *RegisteredMountMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterMount not implemented")
}
func (UnimplementedManagementServer) GetRegisteredMount(context.Context, *emptypb.Empty) (*RegisteredMountMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegisteredMount not implemented")
}
func (UnimplementedManagementServer) Search(grpc.BidiStreamingServer[SearchRequest, SearchResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedManagementServer) Lookup(context.Context, *LookupRequest) (*LookupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lookup not implemented")
}
func (UnimplementedManagementServer) GetSongByPath(context.Context, *PathMessage) (*SongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSongByPath not implemented")
}
func (UnimplementedManagementServer) GetAlbumsByAlbumArtists(context.Context, *IdMessage) (*AlbumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlbumsByAlbumArtists not implemented")
}
func (UnimplementedManagementServer) GetDeleted(context.Context, *emptypb.Empty) (*GetDeletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeleted not implemented")
}
func (UnimplementedManagementServer) DeleteTracks(context.Context, *IdMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTracks not implemented")
}
func (UnimplementedManagementServer) SubscribeEvents(*emptypb.Empty, grpc.ServerStreamingServer[Progress]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeEvents not implemented")
}
func (UnimplementedManagementServer) mustEmbedUnimplementedManagementServer() {}
func (UnimplementedManagementServer) testEmbeddedByValue()                    {}

// UnsafeManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagementServer will
// result in compilation errors.
type UnsafeManagementServer interface {
	mustEmbedUnimplementedManagementServer()
}

func RegisterManagementServer(s grpc.ServiceRegistrar, srv ManagementServer) {
	// If the following call pancis, it indicates UnimplementedManagementServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Management_ServiceDesc, srv)
}

func _Management_StartSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).StartSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_StartSync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).StartSync(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_AddFolders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FoldersMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).AddFolders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_AddFolders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).AddFolders(ctx, req.(*FoldersMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetAllFolders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetAllFolders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_GetAllFolders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetAllFolders(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_RegisterMount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisteredMountMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).RegisterMount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_RegisterMount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).RegisterMount(ctx, req.(*RegisteredMountMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetRegisteredMount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetRegisteredMount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_GetRegisteredMount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetRegisteredMount(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ManagementServer).Search(&grpc.GenericServerStream[SearchRequest, SearchResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Management_SearchServer = grpc.BidiStreamingServer[SearchRequest, SearchResponse]

func _Management_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_Lookup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).Lookup(ctx, req.(*LookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetSongByPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetSongByPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_GetSongByPath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetSongByPath(ctx, req.(*PathMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetAlbumsByAlbumArtists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetAlbumsByAlbumArtists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_GetAlbumsByAlbumArtists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetAlbumsByAlbumArtists(ctx, req.(*IdMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetDeleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetDeleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_GetDeleted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetDeleted(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_DeleteTracks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).DeleteTracks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_DeleteTracks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).DeleteTracks(ctx, req.(*IdMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_SubscribeEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagementServer).SubscribeEvents(m, &grpc.GenericServerStream[emptypb.Empty, Progress]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Management_SubscribeEventsServer = grpc.ServerStreamingServer[Progress]

// Management_ServiceDesc is the grpc.ServiceDesc for Management service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Management_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "platune.management.v1.Management",
	HandlerType: (*ManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartSync",
			Handler:    _Management_StartSync_Handler,
		},
		{
			MethodName: "AddFolders",
			Handler:    _Management_AddFolders_Handler,
		},
		{
			MethodName: "GetAllFolders",
			Handler:    _Management_GetAllFolders_Handler,
		},
		{
			MethodName: "RegisterMount",
			Handler:    _Management_RegisterMount_Handler,
		},
		{
			MethodName: "GetRegisteredMount",
			Handler:    _Management_GetRegisteredMount_Handler,
		},
		{
			MethodName: "Lookup",
			Handler:    _Management_Lookup_Handler,
		},
		{
			MethodName: "GetSongByPath",
			Handler:    _Management_GetSongByPath_Handler,
		},
		{
			MethodName: "GetAlbumsByAlbumArtists",
			Handler:    _Management_GetAlbumsByAlbumArtists_Handler,
		},
		{
			MethodName: "GetDeleted",
			Handler:    _Management_GetDeleted_Handler,
		},
		{
			MethodName: "DeleteTracks",
			Handler:    _Management_DeleteTracks_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Search",
			Handler:       _Management_Search_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SubscribeEvents",
			Handler:       _Management_SubscribeEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "management.proto",
}
